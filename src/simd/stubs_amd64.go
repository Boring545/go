// Code generated by x/arch/internal/simdgen using 'go run . -xedPath $XED_PATH -o godefs -goroot $GOROOT go.yaml types.yaml categories.yaml'; DO NOT EDIT.

//go:build goexperiment.simd

package simd

// Asm: VRCP14PS, CPU Feature: AVX512EVEX
func (x Float32x16) ApproximateReciprocal() Float32x16

// Asm: VRSQRT14PS, CPU Feature: AVX512EVEX
func (x Float32x16) ApproximateReciprocalOfSqrt() Float32x16

// Asm: VSQRTPS, CPU Feature: AVX512EVEX
func (x Float32x16) Sqrt() Float32x16

// Asm: VRCP14PS, CPU Feature: AVX512EVEX
func (x Float32x4) ApproximateReciprocal() Float32x4

// Asm: VRSQRTPS, CPU Feature: AVX
func (x Float32x4) ApproximateReciprocalOfSqrt() Float32x4

// Asm: VROUNDPS, CPU Feature: AVX
func (x Float32x4) Ceil() Float32x4

// Asm: VROUNDPS, CPU Feature: AVX
func (x Float32x4) Floor() Float32x4

// Asm: VROUNDPS, CPU Feature: AVX
func (x Float32x4) Round() Float32x4

// Asm: VSQRTPS, CPU Feature: AVX
func (x Float32x4) Sqrt() Float32x4

// Asm: VROUNDPS, CPU Feature: AVX
func (x Float32x4) Trunc() Float32x4

// Asm: VRCP14PS, CPU Feature: AVX512EVEX
func (x Float32x8) ApproximateReciprocal() Float32x8

// Asm: VRSQRTPS, CPU Feature: AVX
func (x Float32x8) ApproximateReciprocalOfSqrt() Float32x8

// Asm: VROUNDPS, CPU Feature: AVX
func (x Float32x8) Ceil() Float32x8

// Asm: VROUNDPS, CPU Feature: AVX
func (x Float32x8) Floor() Float32x8

// Asm: VROUNDPS, CPU Feature: AVX
func (x Float32x8) Round() Float32x8

// Asm: VSQRTPS, CPU Feature: AVX
func (x Float32x8) Sqrt() Float32x8

// Asm: VROUNDPS, CPU Feature: AVX
func (x Float32x8) Trunc() Float32x8

// Asm: VRCP14PD, CPU Feature: AVX512EVEX
func (x Float64x2) ApproximateReciprocal() Float64x2

// Asm: VRSQRT14PD, CPU Feature: AVX512EVEX
func (x Float64x2) ApproximateReciprocalOfSqrt() Float64x2

// Asm: VROUNDPD, CPU Feature: AVX
func (x Float64x2) Ceil() Float64x2

// Asm: VROUNDPD, CPU Feature: AVX
func (x Float64x2) Floor() Float64x2

// Asm: VROUNDPD, CPU Feature: AVX
func (x Float64x2) Round() Float64x2

// Asm: VSQRTPD, CPU Feature: AVX
func (x Float64x2) Sqrt() Float64x2

// Asm: VROUNDPD, CPU Feature: AVX
func (x Float64x2) Trunc() Float64x2

// Asm: VRCP14PD, CPU Feature: AVX512EVEX
func (x Float64x4) ApproximateReciprocal() Float64x4

// Asm: VRSQRT14PD, CPU Feature: AVX512EVEX
func (x Float64x4) ApproximateReciprocalOfSqrt() Float64x4

// Asm: VROUNDPD, CPU Feature: AVX
func (x Float64x4) Ceil() Float64x4

// Asm: VROUNDPD, CPU Feature: AVX
func (x Float64x4) Floor() Float64x4

// Asm: VROUNDPD, CPU Feature: AVX
func (x Float64x4) Round() Float64x4

// Asm: VSQRTPD, CPU Feature: AVX
func (x Float64x4) Sqrt() Float64x4

// Asm: VROUNDPD, CPU Feature: AVX
func (x Float64x4) Trunc() Float64x4

// Asm: VRCP14PD, CPU Feature: AVX512EVEX
func (x Float64x8) ApproximateReciprocal() Float64x8

// Asm: VRSQRT14PD, CPU Feature: AVX512EVEX
func (x Float64x8) ApproximateReciprocalOfSqrt() Float64x8

// Asm: VSQRTPD, CPU Feature: AVX512EVEX
func (x Float64x8) Sqrt() Float64x8

// Asm: VPABSW, CPU Feature: AVX2
func (x Int16x16) Absolute() Int16x16

// Asm: VPOPCNTW, CPU Feature: AVX512EVEX
func (x Int16x16) PopCount() Int16x16

// Asm: VPABSW, CPU Feature: AVX512EVEX
func (x Int16x32) Absolute() Int16x32

// Asm: VPOPCNTW, CPU Feature: AVX512EVEX
func (x Int16x32) PopCount() Int16x32

// Asm: VPABSW, CPU Feature: AVX
func (x Int16x8) Absolute() Int16x8

// Asm: VPOPCNTW, CPU Feature: AVX512EVEX
func (x Int16x8) PopCount() Int16x8

// Asm: VPABSD, CPU Feature: AVX512EVEX
func (x Int32x16) Absolute() Int32x16

// Asm: VPOPCNTD, CPU Feature: AVX512EVEX
func (x Int32x16) PopCount() Int32x16

// Asm: VPABSD, CPU Feature: AVX
func (x Int32x4) Absolute() Int32x4

// Asm: VPOPCNTD, CPU Feature: AVX512EVEX
func (x Int32x4) PopCount() Int32x4

// Asm: VPABSD, CPU Feature: AVX2
func (x Int32x8) Absolute() Int32x8

// Asm: VPOPCNTD, CPU Feature: AVX512EVEX
func (x Int32x8) PopCount() Int32x8

// Asm: VPABSQ, CPU Feature: AVX512EVEX
func (x Int64x2) Absolute() Int64x2

// Asm: VPOPCNTQ, CPU Feature: AVX512EVEX
func (x Int64x2) PopCount() Int64x2

// Asm: VPABSQ, CPU Feature: AVX512EVEX
func (x Int64x4) Absolute() Int64x4

// Asm: VPOPCNTQ, CPU Feature: AVX512EVEX
func (x Int64x4) PopCount() Int64x4

// Asm: VPABSQ, CPU Feature: AVX512EVEX
func (x Int64x8) Absolute() Int64x8

// Asm: VPOPCNTQ, CPU Feature: AVX512EVEX
func (x Int64x8) PopCount() Int64x8

// Asm: VPABSB, CPU Feature: AVX
func (x Int8x16) Absolute() Int8x16

// Asm: VPOPCNTB, CPU Feature: AVX512EVEX
func (x Int8x16) PopCount() Int8x16

// Asm: VPABSB, CPU Feature: AVX2
func (x Int8x32) Absolute() Int8x32

// Asm: VPOPCNTB, CPU Feature: AVX512EVEX
func (x Int8x32) PopCount() Int8x32

// Asm: VPABSB, CPU Feature: AVX512EVEX
func (x Int8x64) Absolute() Int8x64

// Asm: VPOPCNTB, CPU Feature: AVX512EVEX
func (x Int8x64) PopCount() Int8x64

// Asm: VPOPCNTW, CPU Feature: AVX512EVEX
func (x Uint16x16) PopCount() Uint16x16

// Asm: VPOPCNTW, CPU Feature: AVX512EVEX
func (x Uint16x32) PopCount() Uint16x32

// Asm: VPOPCNTW, CPU Feature: AVX512EVEX
func (x Uint16x8) PopCount() Uint16x8

// Asm: VPOPCNTD, CPU Feature: AVX512EVEX
func (x Uint32x16) PopCount() Uint32x16

// Asm: VPOPCNTD, CPU Feature: AVX512EVEX
func (x Uint32x4) PopCount() Uint32x4

// Asm: VPOPCNTD, CPU Feature: AVX512EVEX
func (x Uint32x8) PopCount() Uint32x8

// Asm: VPOPCNTQ, CPU Feature: AVX512EVEX
func (x Uint64x2) PopCount() Uint64x2

// Asm: VPOPCNTQ, CPU Feature: AVX512EVEX
func (x Uint64x4) PopCount() Uint64x4

// Asm: VPOPCNTQ, CPU Feature: AVX512EVEX
func (x Uint64x8) PopCount() Uint64x8

// Asm: VPOPCNTB, CPU Feature: AVX512EVEX
func (x Uint8x16) PopCount() Uint8x16

// Asm: VPOPCNTB, CPU Feature: AVX512EVEX
func (x Uint8x32) PopCount() Uint8x32

// Asm: VPOPCNTB, CPU Feature: AVX512EVEX
func (x Uint8x64) PopCount() Uint8x64

// Asm: VADDPS, CPU Feature: AVX512EVEX
func (x Float32x16) Add(y Float32x16) Float32x16

// Asm: VANDPS, CPU Feature: AVX512EVEX
func (x Float32x16) And(y Float32x16) Float32x16

// Asm: VANDNPS, CPU Feature: AVX512EVEX
func (x Float32x16) AndNot(y Float32x16) Float32x16

// Asm: VDIVPS, CPU Feature: AVX512EVEX
func (x Float32x16) Div(y Float32x16) Float32x16

// Predicate immediate is 0 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) Equal(y Float32x16) Mask32x16

// Predicate immediate is 6 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) Greater(y Float32x16) Mask32x16

// Predicate immediate is 5 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) GreaterEqual(y Float32x16) Mask32x16

// Predicate immediate is 3 if it has; Returns mask element True if either one of the input\'s element is Nan; Please use this method as x\.IsNan\(x\) to check x only;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) IsNan(y Float32x16) Mask32x16

// Predicate immediate is 1 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) Less(y Float32x16) Mask32x16

// Predicate immediate is 2 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) LessEqual(y Float32x16) Mask32x16

// Asm: VRCP14PS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedApproximateReciprocal(y Mask32x16) Float32x16

// Asm: VRSQRT14PS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedApproximateReciprocalOfSqrt(y Mask32x16) Float32x16

// Asm: VSQRTPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedSqrt(y Mask32x16) Float32x16

// Asm: VMAXPS, CPU Feature: AVX512EVEX
func (x Float32x16) Max(y Float32x16) Float32x16

// Asm: VMINPS, CPU Feature: AVX512EVEX
func (x Float32x16) Min(y Float32x16) Float32x16

// Asm: VMULPS, CPU Feature: AVX512EVEX
func (x Float32x16) Mul(y Float32x16) Float32x16

// Asm: VSCALEFPS, CPU Feature: AVX512EVEX
func (x Float32x16) MulByPowOf2(y Float32x16) Float32x16

// Predicate immediate is 4 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) NotEqual(y Float32x16) Mask32x16

// Asm: VORPS, CPU Feature: AVX512EVEX
func (x Float32x16) Or(y Float32x16) Float32x16

// Asm: VADDPS, CPU Feature: AVX512EVEX
func (x Float32x16) Sub(y Float32x16) Float32x16

// Asm: VXORPS, CPU Feature: AVX512EVEX
func (x Float32x16) Xor(y Float32x16) Float32x16

// Asm: VADDPS, CPU Feature: AVX
func (x Float32x4) Add(y Float32x4) Float32x4

// Asm: VADDSUBPS, CPU Feature: AVX
func (x Float32x4) AddSub(y Float32x4) Float32x4

// Asm: VANDPS, CPU Feature: AVX
func (x Float32x4) And(y Float32x4) Float32x4

// Asm: VANDNPS, CPU Feature: AVX
func (x Float32x4) AndNot(y Float32x4) Float32x4

// Asm: VDIVPS, CPU Feature: AVX
func (x Float32x4) Div(y Float32x4) Float32x4

// Predicate immediate is 0 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x4) Equal(y Float32x4) Mask32x4

// Predicate immediate is 6 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x4) Greater(y Float32x4) Mask32x4

// Predicate immediate is 5 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x4) GreaterEqual(y Float32x4) Mask32x4

// Predicate immediate is 3 if it has; Returns mask element True if either one of the input\'s element is Nan; Please use this method as x\.IsNan\(x\) to check x only;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x4) IsNan(y Float32x4) Mask32x4

// Predicate immediate is 1 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x4) Less(y Float32x4) Mask32x4

// Predicate immediate is 2 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x4) LessEqual(y Float32x4) Mask32x4

// Asm: VRCP14PS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedApproximateReciprocal(y Mask32x4) Float32x4

// Asm: VRSQRT14PS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedApproximateReciprocalOfSqrt(y Mask32x4) Float32x4

// Asm: VSQRTPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedSqrt(y Mask32x4) Float32x4

// Asm: VMAXPS, CPU Feature: AVX
func (x Float32x4) Max(y Float32x4) Float32x4

// Asm: VMINPS, CPU Feature: AVX
func (x Float32x4) Min(y Float32x4) Float32x4

// Asm: VMULPS, CPU Feature: AVX
func (x Float32x4) Mul(y Float32x4) Float32x4

// Asm: VSCALEFPS, CPU Feature: AVX512EVEX
func (x Float32x4) MulByPowOf2(y Float32x4) Float32x4

// Predicate immediate is 4 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x4) NotEqual(y Float32x4) Mask32x4

// Asm: VORPS, CPU Feature: AVX
func (x Float32x4) Or(y Float32x4) Float32x4

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target
//
// Asm: VHADDPS, CPU Feature: AVX
func (x Float32x4) PairwiseAdd(y Float32x4) Float32x4

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target
//
// Asm: VHSUBPS, CPU Feature: AVX
func (x Float32x4) PairwiseSub(y Float32x4) Float32x4

// Asm: VADDPS, CPU Feature: AVX
func (x Float32x4) Sub(y Float32x4) Float32x4

// Asm: VXORPS, CPU Feature: AVX
func (x Float32x4) Xor(y Float32x4) Float32x4

// Asm: VADDPS, CPU Feature: AVX
func (x Float32x8) Add(y Float32x8) Float32x8

// Asm: VADDSUBPS, CPU Feature: AVX
func (x Float32x8) AddSub(y Float32x8) Float32x8

// Asm: VANDPS, CPU Feature: AVX
func (x Float32x8) And(y Float32x8) Float32x8

// Asm: VANDNPS, CPU Feature: AVX
func (x Float32x8) AndNot(y Float32x8) Float32x8

// Asm: VDIVPS, CPU Feature: AVX
func (x Float32x8) Div(y Float32x8) Float32x8

// Predicate immediate is 0 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x8) Equal(y Float32x8) Mask32x8

// Predicate immediate is 6 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x8) Greater(y Float32x8) Mask32x8

// Predicate immediate is 5 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x8) GreaterEqual(y Float32x8) Mask32x8

// Predicate immediate is 3 if it has; Returns mask element True if either one of the input\'s element is Nan; Please use this method as x\.IsNan\(x\) to check x only;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x8) IsNan(y Float32x8) Mask32x8

// Predicate immediate is 1 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x8) Less(y Float32x8) Mask32x8

// Predicate immediate is 2 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x8) LessEqual(y Float32x8) Mask32x8

// Asm: VRCP14PS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedApproximateReciprocal(y Mask32x8) Float32x8

// Asm: VRSQRT14PS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedApproximateReciprocalOfSqrt(y Mask32x8) Float32x8

// Asm: VSQRTPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedSqrt(y Mask32x8) Float32x8

// Asm: VMAXPS, CPU Feature: AVX
func (x Float32x8) Max(y Float32x8) Float32x8

// Asm: VMINPS, CPU Feature: AVX
func (x Float32x8) Min(y Float32x8) Float32x8

// Asm: VMULPS, CPU Feature: AVX
func (x Float32x8) Mul(y Float32x8) Float32x8

// Asm: VSCALEFPS, CPU Feature: AVX512EVEX
func (x Float32x8) MulByPowOf2(y Float32x8) Float32x8

// Predicate immediate is 4 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX
func (x Float32x8) NotEqual(y Float32x8) Mask32x8

// Asm: VORPS, CPU Feature: AVX
func (x Float32x8) Or(y Float32x8) Float32x8

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target
//
// Asm: VHADDPS, CPU Feature: AVX
func (x Float32x8) PairwiseAdd(y Float32x8) Float32x8

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target
//
// Asm: VHSUBPS, CPU Feature: AVX
func (x Float32x8) PairwiseSub(y Float32x8) Float32x8

// Asm: VADDPS, CPU Feature: AVX
func (x Float32x8) Sub(y Float32x8) Float32x8

// Asm: VXORPS, CPU Feature: AVX
func (x Float32x8) Xor(y Float32x8) Float32x8

// Asm: VADDPD, CPU Feature: AVX
func (x Float64x2) Add(y Float64x2) Float64x2

// Asm: VADDSUBPD, CPU Feature: AVX
func (x Float64x2) AddSub(y Float64x2) Float64x2

// Asm: VANDPD, CPU Feature: AVX
func (x Float64x2) And(y Float64x2) Float64x2

// Asm: VANDNPD, CPU Feature: AVX
func (x Float64x2) AndNot(y Float64x2) Float64x2

// Asm: VDIVPD, CPU Feature: AVX
func (x Float64x2) Div(y Float64x2) Float64x2

// Predicate immediate is 0 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x2) Equal(y Float64x2) Mask64x2

// Predicate immediate is 6 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x2) Greater(y Float64x2) Mask64x2

// Predicate immediate is 5 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x2) GreaterEqual(y Float64x2) Mask64x2

// Predicate immediate is 3 if it has; Returns mask element True if either one of the input\'s element is Nan; Please use this method as x\.IsNan\(x\) to check x only;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x2) IsNan(y Float64x2) Mask64x2

// Predicate immediate is 1 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x2) Less(y Float64x2) Mask64x2

// Predicate immediate is 2 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x2) LessEqual(y Float64x2) Mask64x2

// Asm: VRCP14PD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedApproximateReciprocal(y Mask64x2) Float64x2

// Asm: VRSQRT14PD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedApproximateReciprocalOfSqrt(y Mask64x2) Float64x2

// Asm: VSQRTPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedSqrt(y Mask64x2) Float64x2

// Asm: VMAXPD, CPU Feature: AVX
func (x Float64x2) Max(y Float64x2) Float64x2

// Asm: VMINPD, CPU Feature: AVX
func (x Float64x2) Min(y Float64x2) Float64x2

// Asm: VMULPD, CPU Feature: AVX
func (x Float64x2) Mul(y Float64x2) Float64x2

// Asm: VSCALEFPD, CPU Feature: AVX512EVEX
func (x Float64x2) MulByPowOf2(y Float64x2) Float64x2

// Predicate immediate is 4 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x2) NotEqual(y Float64x2) Mask64x2

// Asm: VORPD, CPU Feature: AVX
func (x Float64x2) Or(y Float64x2) Float64x2

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target
//
// Asm: VHADDPD, CPU Feature: AVX
func (x Float64x2) PairwiseAdd(y Float64x2) Float64x2

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target
//
// Asm: VHSUBPD, CPU Feature: AVX
func (x Float64x2) PairwiseSub(y Float64x2) Float64x2

// Asm: VADDPD, CPU Feature: AVX
func (x Float64x2) Sub(y Float64x2) Float64x2

// Asm: VXORPD, CPU Feature: AVX
func (x Float64x2) Xor(y Float64x2) Float64x2

// Asm: VADDPD, CPU Feature: AVX
func (x Float64x4) Add(y Float64x4) Float64x4

// Asm: VADDSUBPD, CPU Feature: AVX
func (x Float64x4) AddSub(y Float64x4) Float64x4

// Asm: VANDPD, CPU Feature: AVX
func (x Float64x4) And(y Float64x4) Float64x4

// Asm: VANDNPD, CPU Feature: AVX
func (x Float64x4) AndNot(y Float64x4) Float64x4

// Asm: VDIVPD, CPU Feature: AVX
func (x Float64x4) Div(y Float64x4) Float64x4

// Predicate immediate is 0 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x4) Equal(y Float64x4) Mask64x4

// Predicate immediate is 6 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x4) Greater(y Float64x4) Mask64x4

// Predicate immediate is 5 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x4) GreaterEqual(y Float64x4) Mask64x4

// Predicate immediate is 3 if it has; Returns mask element True if either one of the input\'s element is Nan; Please use this method as x\.IsNan\(x\) to check x only;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x4) IsNan(y Float64x4) Mask64x4

// Predicate immediate is 1 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x4) Less(y Float64x4) Mask64x4

// Predicate immediate is 2 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x4) LessEqual(y Float64x4) Mask64x4

// Asm: VRCP14PD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedApproximateReciprocal(y Mask64x4) Float64x4

// Asm: VRSQRT14PD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedApproximateReciprocalOfSqrt(y Mask64x4) Float64x4

// Asm: VSQRTPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedSqrt(y Mask64x4) Float64x4

// Asm: VMAXPD, CPU Feature: AVX
func (x Float64x4) Max(y Float64x4) Float64x4

// Asm: VMINPD, CPU Feature: AVX
func (x Float64x4) Min(y Float64x4) Float64x4

// Asm: VMULPD, CPU Feature: AVX
func (x Float64x4) Mul(y Float64x4) Float64x4

// Asm: VSCALEFPD, CPU Feature: AVX512EVEX
func (x Float64x4) MulByPowOf2(y Float64x4) Float64x4

// Predicate immediate is 4 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX
func (x Float64x4) NotEqual(y Float64x4) Mask64x4

// Asm: VORPD, CPU Feature: AVX
func (x Float64x4) Or(y Float64x4) Float64x4

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target
//
// Asm: VHADDPD, CPU Feature: AVX
func (x Float64x4) PairwiseAdd(y Float64x4) Float64x4

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target
//
// Asm: VHSUBPD, CPU Feature: AVX
func (x Float64x4) PairwiseSub(y Float64x4) Float64x4

// Asm: VADDPD, CPU Feature: AVX
func (x Float64x4) Sub(y Float64x4) Float64x4

// Asm: VXORPD, CPU Feature: AVX
func (x Float64x4) Xor(y Float64x4) Float64x4

// Asm: VADDPD, CPU Feature: AVX512EVEX
func (x Float64x8) Add(y Float64x8) Float64x8

// Asm: VANDPD, CPU Feature: AVX512EVEX
func (x Float64x8) And(y Float64x8) Float64x8

// Asm: VANDNPD, CPU Feature: AVX512EVEX
func (x Float64x8) AndNot(y Float64x8) Float64x8

// Asm: VDIVPD, CPU Feature: AVX512EVEX
func (x Float64x8) Div(y Float64x8) Float64x8

// Predicate immediate is 0 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) Equal(y Float64x8) Mask64x8

// Predicate immediate is 6 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) Greater(y Float64x8) Mask64x8

// Predicate immediate is 5 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) GreaterEqual(y Float64x8) Mask64x8

// Predicate immediate is 3 if it has; Returns mask element True if either one of the input\'s element is Nan; Please use this method as x\.IsNan\(x\) to check x only;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) IsNan(y Float64x8) Mask64x8

// Predicate immediate is 1 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) Less(y Float64x8) Mask64x8

// Predicate immediate is 2 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) LessEqual(y Float64x8) Mask64x8

// Asm: VRCP14PD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedApproximateReciprocal(y Mask64x8) Float64x8

// Asm: VRSQRT14PD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedApproximateReciprocalOfSqrt(y Mask64x8) Float64x8

// Asm: VSQRTPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedSqrt(y Mask64x8) Float64x8

// Asm: VMAXPD, CPU Feature: AVX512EVEX
func (x Float64x8) Max(y Float64x8) Float64x8

// Asm: VMINPD, CPU Feature: AVX512EVEX
func (x Float64x8) Min(y Float64x8) Float64x8

// Asm: VMULPD, CPU Feature: AVX512EVEX
func (x Float64x8) Mul(y Float64x8) Float64x8

// Asm: VSCALEFPD, CPU Feature: AVX512EVEX
func (x Float64x8) MulByPowOf2(y Float64x8) Float64x8

// Predicate immediate is 4 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) NotEqual(y Float64x8) Mask64x8

// Asm: VORPD, CPU Feature: AVX512EVEX
func (x Float64x8) Or(y Float64x8) Float64x8

// Asm: VADDPD, CPU Feature: AVX512EVEX
func (x Float64x8) Sub(y Float64x8) Float64x8

// Asm: VXORPD, CPU Feature: AVX512EVEX
func (x Float64x8) Xor(y Float64x8) Float64x8

// Asm: VPADDW, CPU Feature: AVX2
func (x Int16x16) Add(y Int16x16) Int16x16

// Asm: VPAND, CPU Feature: AVX2
func (x Int16x16) And(y Int16x16) Int16x16

// Asm: VPANDN, CPU Feature: AVX2
func (x Int16x16) AndNot(y Int16x16) Int16x16

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQW, CPU Feature: AVX2
func (x Int16x16) Equal(y Int16x16) Mask16x16

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTW, CPU Feature: AVX2
func (x Int16x16) Greater(y Int16x16) Mask16x16

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x16) GreaterEqual(y Int16x16) Mask16x16

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x16) Less(y Int16x16) Mask16x16

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x16) LessEqual(y Int16x16) Mask16x16

// Asm: VPABSW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedAbsolute(y Mask16x16) Int16x16

// Asm: VPOPCNTW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedPopCount(y Mask16x16) Int16x16

// Asm: VPMAXSW, CPU Feature: AVX2
func (x Int16x16) Max(y Int16x16) Int16x16

// Asm: VPMINSW, CPU Feature: AVX2
func (x Int16x16) Min(y Int16x16) Int16x16

// Multiplies the elements from the two sources of size X at index i, store the high X bits of the result of size 2X at index i
//
// Asm: VPMULHW, CPU Feature: AVX2
func (x Int16x16) MulHigh(y Int16x16) Int16x16

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLW, CPU Feature: AVX2
func (x Int16x16) MulLow(y Int16x16) Int16x16

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x16) NotEqual(y Int16x16) Mask16x16

// Asm: VPOR, CPU Feature: AVX2
func (x Int16x16) Or(y Int16x16) Int16x16

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHADDW, CPU Feature: AVX2
func (x Int16x16) PairwiseAdd(y Int16x16) Int16x16

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHSUBW, CPU Feature: AVX2
func (x Int16x16) PairwiseSub(y Int16x16) Int16x16

// Asm: VPADDSW, CPU Feature: AVX2
func (x Int16x16) SaturatedAdd(y Int16x16) Int16x16

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target; With saturation
//
// Asm: VPHADDSW, CPU Feature: AVX2
func (x Int16x16) SaturatedPairwiseAdd(y Int16x16) Int16x16

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target; With saturation
//
// Asm: VPHSUBSW, CPU Feature: AVX2
func (x Int16x16) SaturatedPairwiseSub(y Int16x16) Int16x16

// Asm: VPSUBSW, CPU Feature: AVX2
func (x Int16x16) SaturatedSub(y Int16x16) Int16x16

// Asm: VPSIGNW, CPU Feature: AVX2
func (x Int16x16) Sign(y Int16x16) Int16x16

// Asm: VPSUBW, CPU Feature: AVX2
func (x Int16x16) Sub(y Int16x16) Int16x16

// Asm: VPXOR, CPU Feature: AVX2
func (x Int16x16) Xor(y Int16x16) Int16x16

// Asm: VPADDW, CPU Feature: AVX512EVEX
func (x Int16x32) Add(y Int16x32) Int16x32

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQW, CPU Feature: AVX512EVEX
func (x Int16x32) Equal(y Int16x32) Mask16x32

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTW, CPU Feature: AVX512EVEX
func (x Int16x32) Greater(y Int16x32) Mask16x32

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x32) GreaterEqual(y Int16x32) Mask16x32

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x32) Less(y Int16x32) Mask16x32

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x32) LessEqual(y Int16x32) Mask16x32

// Asm: VPABSW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedAbsolute(y Mask16x32) Int16x32

// Asm: VPOPCNTW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedPopCount(y Mask16x32) Int16x32

// Asm: VPMAXSW, CPU Feature: AVX512EVEX
func (x Int16x32) Max(y Int16x32) Int16x32

// Asm: VPMINSW, CPU Feature: AVX512EVEX
func (x Int16x32) Min(y Int16x32) Int16x32

// Multiplies the elements from the two sources of size X at index i, store the high X bits of the result of size 2X at index i
//
// Asm: VPMULHW, CPU Feature: AVX512EVEX
func (x Int16x32) MulHigh(y Int16x32) Int16x32

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLW, CPU Feature: AVX512EVEX
func (x Int16x32) MulLow(y Int16x32) Int16x32

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x32) NotEqual(y Int16x32) Mask16x32

// Asm: VPADDSW, CPU Feature: AVX512EVEX
func (x Int16x32) SaturatedAdd(y Int16x32) Int16x32

// Asm: VPSUBSW, CPU Feature: AVX512EVEX
func (x Int16x32) SaturatedSub(y Int16x32) Int16x32

// Asm: VPSUBW, CPU Feature: AVX512EVEX
func (x Int16x32) Sub(y Int16x32) Int16x32

// Asm: VPADDW, CPU Feature: AVX
func (x Int16x8) Add(y Int16x8) Int16x8

// Asm: VPAND, CPU Feature: AVX
func (x Int16x8) And(y Int16x8) Int16x8

// Asm: VPANDN, CPU Feature: AVX
func (x Int16x8) AndNot(y Int16x8) Int16x8

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQW, CPU Feature: AVX
func (x Int16x8) Equal(y Int16x8) Mask16x8

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTW, CPU Feature: AVX
func (x Int16x8) Greater(y Int16x8) Mask16x8

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x8) GreaterEqual(y Int16x8) Mask16x8

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x8) Less(y Int16x8) Mask16x8

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x8) LessEqual(y Int16x8) Mask16x8

// Asm: VPABSW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedAbsolute(y Mask16x8) Int16x8

// Asm: VPOPCNTW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedPopCount(y Mask16x8) Int16x8

// Asm: VPMAXSW, CPU Feature: AVX
func (x Int16x8) Max(y Int16x8) Int16x8

// Asm: VPMINSW, CPU Feature: AVX
func (x Int16x8) Min(y Int16x8) Int16x8

// Multiplies the elements from the two sources of size X at index i, store the high X bits of the result of size 2X at index i
//
// Asm: VPMULHW, CPU Feature: AVX
func (x Int16x8) MulHigh(y Int16x8) Int16x8

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLW, CPU Feature: AVX
func (x Int16x8) MulLow(y Int16x8) Int16x8

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x8) NotEqual(y Int16x8) Mask16x8

// Asm: VPOR, CPU Feature: AVX
func (x Int16x8) Or(y Int16x8) Int16x8

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHADDW, CPU Feature: AVX
func (x Int16x8) PairwiseAdd(y Int16x8) Int16x8

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHSUBW, CPU Feature: AVX
func (x Int16x8) PairwiseSub(y Int16x8) Int16x8

// Asm: VPADDSW, CPU Feature: AVX
func (x Int16x8) SaturatedAdd(y Int16x8) Int16x8

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target; With saturation
//
// Asm: VPHADDSW, CPU Feature: AVX
func (x Int16x8) SaturatedPairwiseAdd(y Int16x8) Int16x8

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target; With saturation
//
// Asm: VPHSUBSW, CPU Feature: AVX
func (x Int16x8) SaturatedPairwiseSub(y Int16x8) Int16x8

// Asm: VPSUBSW, CPU Feature: AVX
func (x Int16x8) SaturatedSub(y Int16x8) Int16x8

// Asm: VPSIGNW, CPU Feature: AVX
func (x Int16x8) Sign(y Int16x8) Int16x8

// Asm: VPSUBW, CPU Feature: AVX
func (x Int16x8) Sub(y Int16x8) Int16x8

// Asm: VPXOR, CPU Feature: AVX
func (x Int16x8) Xor(y Int16x8) Int16x8

// Asm: VPADDD, CPU Feature: AVX512EVEX
func (x Int32x16) Add(y Int32x16) Int32x16

// Asm: VPANDD, CPU Feature: AVX512EVEX
func (x Int32x16) And(y Int32x16) Int32x16

// Asm: VPANDND, CPU Feature: AVX512EVEX
func (x Int32x16) AndNot(y Int32x16) Int32x16

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQD, CPU Feature: AVX512EVEX
func (x Int32x16) Equal(y Int32x16) Mask32x16

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTD, CPU Feature: AVX512EVEX
func (x Int32x16) Greater(y Int32x16) Mask32x16

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x16) GreaterEqual(y Int32x16) Mask32x16

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x16) Less(y Int32x16) Mask32x16

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x16) LessEqual(y Int32x16) Mask32x16

// Asm: VPABSD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedAbsolute(y Mask32x16) Int32x16

// Asm: VPOPCNTD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedPopCount(y Mask32x16) Int32x16

// Asm: VPMAXSD, CPU Feature: AVX512EVEX
func (x Int32x16) Max(y Int32x16) Int32x16

// Asm: VPMINSD, CPU Feature: AVX512EVEX
func (x Int32x16) Min(y Int32x16) Int32x16

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLD, CPU Feature: AVX512EVEX
func (x Int32x16) MulLow(y Int32x16) Int32x16

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x16) NotEqual(y Int32x16) Mask32x16

// Asm: VPORD, CPU Feature: AVX512EVEX
func (x Int32x16) Or(y Int32x16) Int32x16

// Asm: VPSUBD, CPU Feature: AVX512EVEX
func (x Int32x16) Sub(y Int32x16) Int32x16

// Asm: VPXORD, CPU Feature: AVX512EVEX
func (x Int32x16) Xor(y Int32x16) Int32x16

// Asm: VPADDD, CPU Feature: AVX
func (x Int32x4) Add(y Int32x4) Int32x4

// Asm: VPAND, CPU Feature: AVX
func (x Int32x4) And(y Int32x4) Int32x4

// Asm: VPANDN, CPU Feature: AVX
func (x Int32x4) AndNot(y Int32x4) Int32x4

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQD, CPU Feature: AVX
func (x Int32x4) Equal(y Int32x4) Mask32x4

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTD, CPU Feature: AVX
func (x Int32x4) Greater(y Int32x4) Mask32x4

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x4) GreaterEqual(y Int32x4) Mask32x4

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x4) Less(y Int32x4) Mask32x4

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x4) LessEqual(y Int32x4) Mask32x4

// Asm: VPABSD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedAbsolute(y Mask32x4) Int32x4

// Asm: VPOPCNTD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedPopCount(y Mask32x4) Int32x4

// Asm: VPMAXSD, CPU Feature: AVX
func (x Int32x4) Max(y Int32x4) Int32x4

// Asm: VPMINSD, CPU Feature: AVX
func (x Int32x4) Min(y Int32x4) Int32x4

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULDQ, CPU Feature: AVX
func (x Int32x4) MulEvenWiden(y Int32x4) Int64x2

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLD, CPU Feature: AVX
func (x Int32x4) MulLow(y Int32x4) Int32x4

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x4) NotEqual(y Int32x4) Mask32x4

// Asm: VPOR, CPU Feature: AVX
func (x Int32x4) Or(y Int32x4) Int32x4

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHADDD, CPU Feature: AVX
func (x Int32x4) PairwiseAdd(y Int32x4) Int32x4

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHSUBD, CPU Feature: AVX
func (x Int32x4) PairwiseSub(y Int32x4) Int32x4

// Asm: VPSIGND, CPU Feature: AVX
func (x Int32x4) Sign(y Int32x4) Int32x4

// Asm: VPSUBD, CPU Feature: AVX
func (x Int32x4) Sub(y Int32x4) Int32x4

// Asm: VPXOR, CPU Feature: AVX
func (x Int32x4) Xor(y Int32x4) Int32x4

// Asm: VPADDD, CPU Feature: AVX2
func (x Int32x8) Add(y Int32x8) Int32x8

// Asm: VPAND, CPU Feature: AVX2
func (x Int32x8) And(y Int32x8) Int32x8

// Asm: VPANDN, CPU Feature: AVX2
func (x Int32x8) AndNot(y Int32x8) Int32x8

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQD, CPU Feature: AVX2
func (x Int32x8) Equal(y Int32x8) Mask32x8

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTD, CPU Feature: AVX2
func (x Int32x8) Greater(y Int32x8) Mask32x8

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x8) GreaterEqual(y Int32x8) Mask32x8

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x8) Less(y Int32x8) Mask32x8

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x8) LessEqual(y Int32x8) Mask32x8

// Asm: VPABSD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedAbsolute(y Mask32x8) Int32x8

// Asm: VPOPCNTD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedPopCount(y Mask32x8) Int32x8

// Asm: VPMAXSD, CPU Feature: AVX2
func (x Int32x8) Max(y Int32x8) Int32x8

// Asm: VPMINSD, CPU Feature: AVX2
func (x Int32x8) Min(y Int32x8) Int32x8

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULDQ, CPU Feature: AVX2
func (x Int32x8) MulEvenWiden(y Int32x8) Int64x4

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLD, CPU Feature: AVX2
func (x Int32x8) MulLow(y Int32x8) Int32x8

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x8) NotEqual(y Int32x8) Mask32x8

// Asm: VPOR, CPU Feature: AVX2
func (x Int32x8) Or(y Int32x8) Int32x8

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHADDD, CPU Feature: AVX2
func (x Int32x8) PairwiseAdd(y Int32x8) Int32x8

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHSUBD, CPU Feature: AVX2
func (x Int32x8) PairwiseSub(y Int32x8) Int32x8

// Asm: VPSIGND, CPU Feature: AVX2
func (x Int32x8) Sign(y Int32x8) Int32x8

// Asm: VPSUBD, CPU Feature: AVX2
func (x Int32x8) Sub(y Int32x8) Int32x8

// Asm: VPXOR, CPU Feature: AVX2
func (x Int32x8) Xor(y Int32x8) Int32x8

// Asm: VPADDQ, CPU Feature: AVX
func (x Int64x2) Add(y Int64x2) Int64x2

// Asm: VPAND, CPU Feature: AVX
func (x Int64x2) And(y Int64x2) Int64x2

// Asm: VPANDN, CPU Feature: AVX
func (x Int64x2) AndNot(y Int64x2) Int64x2

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQQ, CPU Feature: AVX
func (x Int64x2) Equal(y Int64x2) Mask64x2

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTQ, CPU Feature: AVX512EVEX
func (x Int64x2) Greater(y Int64x2) Mask64x2

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x2) GreaterEqual(y Int64x2) Mask64x2

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x2) Less(y Int64x2) Mask64x2

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x2) LessEqual(y Int64x2) Mask64x2

// Asm: VPABSQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedAbsolute(y Mask64x2) Int64x2

// Asm: VPOPCNTQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedPopCount(y Mask64x2) Int64x2

// Asm: VPMAXSQ, CPU Feature: AVX512EVEX
func (x Int64x2) Max(y Int64x2) Int64x2

// Asm: VPMINSQ, CPU Feature: AVX512EVEX
func (x Int64x2) Min(y Int64x2) Int64x2

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULDQ, CPU Feature: AVX512EVEX
func (x Int64x2) MulEvenWiden(y Int64x2) Int64x2

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLQ, CPU Feature: AVX512EVEX
func (x Int64x2) MulLow(y Int64x2) Int64x2

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x2) NotEqual(y Int64x2) Mask64x2

// Asm: VPOR, CPU Feature: AVX
func (x Int64x2) Or(y Int64x2) Int64x2

// Asm: VPSUBQ, CPU Feature: AVX
func (x Int64x2) Sub(y Int64x2) Int64x2

// Asm: VPXOR, CPU Feature: AVX
func (x Int64x2) Xor(y Int64x2) Int64x2

// Asm: VPADDQ, CPU Feature: AVX2
func (x Int64x4) Add(y Int64x4) Int64x4

// Asm: VPAND, CPU Feature: AVX2
func (x Int64x4) And(y Int64x4) Int64x4

// Asm: VPANDN, CPU Feature: AVX2
func (x Int64x4) AndNot(y Int64x4) Int64x4

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQQ, CPU Feature: AVX2
func (x Int64x4) Equal(y Int64x4) Mask64x4

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTQ, CPU Feature: AVX2
func (x Int64x4) Greater(y Int64x4) Mask64x4

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x4) GreaterEqual(y Int64x4) Mask64x4

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x4) Less(y Int64x4) Mask64x4

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x4) LessEqual(y Int64x4) Mask64x4

// Asm: VPABSQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedAbsolute(y Mask64x4) Int64x4

// Asm: VPOPCNTQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedPopCount(y Mask64x4) Int64x4

// Asm: VPMAXSQ, CPU Feature: AVX512EVEX
func (x Int64x4) Max(y Int64x4) Int64x4

// Asm: VPMINSQ, CPU Feature: AVX512EVEX
func (x Int64x4) Min(y Int64x4) Int64x4

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULDQ, CPU Feature: AVX512EVEX
func (x Int64x4) MulEvenWiden(y Int64x4) Int64x4

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLQ, CPU Feature: AVX512EVEX
func (x Int64x4) MulLow(y Int64x4) Int64x4

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x4) NotEqual(y Int64x4) Mask64x4

// Asm: VPOR, CPU Feature: AVX2
func (x Int64x4) Or(y Int64x4) Int64x4

// Asm: VPSUBQ, CPU Feature: AVX2
func (x Int64x4) Sub(y Int64x4) Int64x4

// Asm: VPXOR, CPU Feature: AVX2
func (x Int64x4) Xor(y Int64x4) Int64x4

// Asm: VPADDQ, CPU Feature: AVX512EVEX
func (x Int64x8) Add(y Int64x8) Int64x8

// Asm: VPANDQ, CPU Feature: AVX512EVEX
func (x Int64x8) And(y Int64x8) Int64x8

// Asm: VPANDNQ, CPU Feature: AVX512EVEX
func (x Int64x8) AndNot(y Int64x8) Int64x8

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQQ, CPU Feature: AVX512EVEX
func (x Int64x8) Equal(y Int64x8) Mask64x8

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTQ, CPU Feature: AVX512EVEX
func (x Int64x8) Greater(y Int64x8) Mask64x8

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x8) GreaterEqual(y Int64x8) Mask64x8

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x8) Less(y Int64x8) Mask64x8

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x8) LessEqual(y Int64x8) Mask64x8

// Asm: VPABSQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedAbsolute(y Mask64x8) Int64x8

// Asm: VPOPCNTQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedPopCount(y Mask64x8) Int64x8

// Asm: VPMAXSQ, CPU Feature: AVX512EVEX
func (x Int64x8) Max(y Int64x8) Int64x8

// Asm: VPMINSQ, CPU Feature: AVX512EVEX
func (x Int64x8) Min(y Int64x8) Int64x8

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULDQ, CPU Feature: AVX512EVEX
func (x Int64x8) MulEvenWiden(y Int64x8) Int64x8

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLQ, CPU Feature: AVX512EVEX
func (x Int64x8) MulLow(y Int64x8) Int64x8

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x8) NotEqual(y Int64x8) Mask64x8

// Asm: VPORQ, CPU Feature: AVX512EVEX
func (x Int64x8) Or(y Int64x8) Int64x8

// Asm: VPSUBQ, CPU Feature: AVX512EVEX
func (x Int64x8) Sub(y Int64x8) Int64x8

// Asm: VPXORQ, CPU Feature: AVX512EVEX
func (x Int64x8) Xor(y Int64x8) Int64x8

// Asm: VPADDB, CPU Feature: AVX
func (x Int8x16) Add(y Int8x16) Int8x16

// Asm: VPAND, CPU Feature: AVX
func (x Int8x16) And(y Int8x16) Int8x16

// Asm: VPANDN, CPU Feature: AVX
func (x Int8x16) AndNot(y Int8x16) Int8x16

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQB, CPU Feature: AVX
func (x Int8x16) Equal(y Int8x16) Mask8x16

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTB, CPU Feature: AVX
func (x Int8x16) Greater(y Int8x16) Mask8x16

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x16) GreaterEqual(y Int8x16) Mask8x16

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x16) Less(y Int8x16) Mask8x16

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x16) LessEqual(y Int8x16) Mask8x16

// Asm: VPABSB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedAbsolute(y Mask8x16) Int8x16

// Asm: VPOPCNTB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedPopCount(y Mask8x16) Int8x16

// Asm: VPMAXSB, CPU Feature: AVX
func (x Int8x16) Max(y Int8x16) Int8x16

// Asm: VPMINSB, CPU Feature: AVX
func (x Int8x16) Min(y Int8x16) Int8x16

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x16) NotEqual(y Int8x16) Mask8x16

// Asm: VPOR, CPU Feature: AVX
func (x Int8x16) Or(y Int8x16) Int8x16

// Asm: VPADDSB, CPU Feature: AVX
func (x Int8x16) SaturatedAdd(y Int8x16) Int8x16

// Asm: VPSUBSB, CPU Feature: AVX
func (x Int8x16) SaturatedSub(y Int8x16) Int8x16

// Asm: VPSIGNB, CPU Feature: AVX
func (x Int8x16) Sign(y Int8x16) Int8x16

// Asm: VPSUBB, CPU Feature: AVX
func (x Int8x16) Sub(y Int8x16) Int8x16

// Asm: VPXOR, CPU Feature: AVX
func (x Int8x16) Xor(y Int8x16) Int8x16

// Asm: VPADDB, CPU Feature: AVX2
func (x Int8x32) Add(y Int8x32) Int8x32

// Asm: VPAND, CPU Feature: AVX2
func (x Int8x32) And(y Int8x32) Int8x32

// Asm: VPANDN, CPU Feature: AVX2
func (x Int8x32) AndNot(y Int8x32) Int8x32

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQB, CPU Feature: AVX2
func (x Int8x32) Equal(y Int8x32) Mask8x32

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTB, CPU Feature: AVX2
func (x Int8x32) Greater(y Int8x32) Mask8x32

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x32) GreaterEqual(y Int8x32) Mask8x32

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x32) Less(y Int8x32) Mask8x32

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x32) LessEqual(y Int8x32) Mask8x32

// Asm: VPABSB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedAbsolute(y Mask8x32) Int8x32

// Asm: VPOPCNTB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedPopCount(y Mask8x32) Int8x32

// Asm: VPMAXSB, CPU Feature: AVX2
func (x Int8x32) Max(y Int8x32) Int8x32

// Asm: VPMINSB, CPU Feature: AVX2
func (x Int8x32) Min(y Int8x32) Int8x32

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x32) NotEqual(y Int8x32) Mask8x32

// Asm: VPOR, CPU Feature: AVX2
func (x Int8x32) Or(y Int8x32) Int8x32

// Asm: VPADDSB, CPU Feature: AVX2
func (x Int8x32) SaturatedAdd(y Int8x32) Int8x32

// Asm: VPSUBSB, CPU Feature: AVX2
func (x Int8x32) SaturatedSub(y Int8x32) Int8x32

// Asm: VPSIGNB, CPU Feature: AVX2
func (x Int8x32) Sign(y Int8x32) Int8x32

// Asm: VPSUBB, CPU Feature: AVX2
func (x Int8x32) Sub(y Int8x32) Int8x32

// Asm: VPXOR, CPU Feature: AVX2
func (x Int8x32) Xor(y Int8x32) Int8x32

// Asm: VPADDB, CPU Feature: AVX512EVEX
func (x Int8x64) Add(y Int8x64) Int8x64

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQB, CPU Feature: AVX512EVEX
func (x Int8x64) Equal(y Int8x64) Mask8x64

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTB, CPU Feature: AVX512EVEX
func (x Int8x64) Greater(y Int8x64) Mask8x64

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x64) GreaterEqual(y Int8x64) Mask8x64

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x64) Less(y Int8x64) Mask8x64

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x64) LessEqual(y Int8x64) Mask8x64

// Asm: VPABSB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedAbsolute(y Mask8x64) Int8x64

// Asm: VPOPCNTB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedPopCount(y Mask8x64) Int8x64

// Asm: VPMAXSB, CPU Feature: AVX512EVEX
func (x Int8x64) Max(y Int8x64) Int8x64

// Asm: VPMINSB, CPU Feature: AVX512EVEX
func (x Int8x64) Min(y Int8x64) Int8x64

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x64) NotEqual(y Int8x64) Mask8x64

// Asm: VPADDSB, CPU Feature: AVX512EVEX
func (x Int8x64) SaturatedAdd(y Int8x64) Int8x64

// Asm: VPSUBSB, CPU Feature: AVX512EVEX
func (x Int8x64) SaturatedSub(y Int8x64) Int8x64

// Asm: VPSUBB, CPU Feature: AVX512EVEX
func (x Int8x64) Sub(y Int8x64) Int8x64

// Asm: VPADDW, CPU Feature: AVX2
func (x Uint16x16) Add(y Uint16x16) Uint16x16

// Asm: VPAND, CPU Feature: AVX2
func (x Uint16x16) And(y Uint16x16) Uint16x16

// Asm: VPANDN, CPU Feature: AVX2
func (x Uint16x16) AndNot(y Uint16x16) Uint16x16

// Asm: VPAVGW, CPU Feature: AVX2
func (x Uint16x16) Average(y Uint16x16) Uint16x16

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x16) Equal(y Uint16x16) Mask16x16

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x16) Greater(y Uint16x16) Mask16x16

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x16) GreaterEqual(y Uint16x16) Mask16x16

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x16) Less(y Uint16x16) Mask16x16

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x16) LessEqual(y Uint16x16) Mask16x16

// Asm: VPOPCNTW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedPopCount(y Mask16x16) Uint16x16

// Asm: VPMAXUW, CPU Feature: AVX2
func (x Uint16x16) Max(y Uint16x16) Uint16x16

// Asm: VPMINUW, CPU Feature: AVX2
func (x Uint16x16) Min(y Uint16x16) Uint16x16

// Multiplies the elements from the two sources of size X at index i, store the high X bits of the result of size 2X at index i
//
// Asm: VPMULHUW, CPU Feature: AVX2
func (x Uint16x16) MulHigh(y Uint16x16) Uint16x16

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x16) NotEqual(y Uint16x16) Mask16x16

// Asm: VPOR, CPU Feature: AVX2
func (x Uint16x16) Or(y Uint16x16) Uint16x16

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHADDW, CPU Feature: AVX2
func (x Uint16x16) PairwiseAdd(y Uint16x16) Uint16x16

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHSUBW, CPU Feature: AVX2
func (x Uint16x16) PairwiseSub(y Uint16x16) Uint16x16

// Asm: VPADDSW, CPU Feature: AVX2
func (x Uint16x16) SaturatedAdd(y Uint16x16) Uint16x16

// Asm: VPSUBSW, CPU Feature: AVX2
func (x Uint16x16) SaturatedSub(y Uint16x16) Uint16x16

// Asm: VPSUBW, CPU Feature: AVX2
func (x Uint16x16) Sub(y Uint16x16) Uint16x16

// Asm: VPXOR, CPU Feature: AVX2
func (x Uint16x16) Xor(y Uint16x16) Uint16x16

// Asm: VPADDW, CPU Feature: AVX512EVEX
func (x Uint16x32) Add(y Uint16x32) Uint16x32

// Asm: VPAVGW, CPU Feature: AVX512EVEX
func (x Uint16x32) Average(y Uint16x32) Uint16x32

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x32) Equal(y Uint16x32) Mask16x32

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x32) Greater(y Uint16x32) Mask16x32

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x32) GreaterEqual(y Uint16x32) Mask16x32

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x32) Less(y Uint16x32) Mask16x32

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x32) LessEqual(y Uint16x32) Mask16x32

// Asm: VPOPCNTW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedPopCount(y Mask16x32) Uint16x32

// Asm: VPMAXUW, CPU Feature: AVX512EVEX
func (x Uint16x32) Max(y Uint16x32) Uint16x32

// Asm: VPMINUW, CPU Feature: AVX512EVEX
func (x Uint16x32) Min(y Uint16x32) Uint16x32

// Multiplies the elements from the two sources of size X at index i, store the high X bits of the result of size 2X at index i
//
// Asm: VPMULHUW, CPU Feature: AVX512EVEX
func (x Uint16x32) MulHigh(y Uint16x32) Uint16x32

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x32) NotEqual(y Uint16x32) Mask16x32

// Asm: VPADDSW, CPU Feature: AVX512EVEX
func (x Uint16x32) SaturatedAdd(y Uint16x32) Uint16x32

// Asm: VPSUBSW, CPU Feature: AVX512EVEX
func (x Uint16x32) SaturatedSub(y Uint16x32) Uint16x32

// Asm: VPSUBW, CPU Feature: AVX512EVEX
func (x Uint16x32) Sub(y Uint16x32) Uint16x32

// Asm: VPADDW, CPU Feature: AVX
func (x Uint16x8) Add(y Uint16x8) Uint16x8

// Asm: VPAND, CPU Feature: AVX
func (x Uint16x8) And(y Uint16x8) Uint16x8

// Asm: VPANDN, CPU Feature: AVX
func (x Uint16x8) AndNot(y Uint16x8) Uint16x8

// Asm: VPAVGW, CPU Feature: AVX
func (x Uint16x8) Average(y Uint16x8) Uint16x8

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x8) Equal(y Uint16x8) Mask16x8

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x8) Greater(y Uint16x8) Mask16x8

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x8) GreaterEqual(y Uint16x8) Mask16x8

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x8) Less(y Uint16x8) Mask16x8

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x8) LessEqual(y Uint16x8) Mask16x8

// Asm: VPOPCNTW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedPopCount(y Mask16x8) Uint16x8

// Asm: VPMAXUW, CPU Feature: AVX
func (x Uint16x8) Max(y Uint16x8) Uint16x8

// Asm: VPMINUW, CPU Feature: AVX
func (x Uint16x8) Min(y Uint16x8) Uint16x8

// Multiplies the elements from the two sources of size X at index i, store the high X bits of the result of size 2X at index i
//
// Asm: VPMULHUW, CPU Feature: AVX
func (x Uint16x8) MulHigh(y Uint16x8) Uint16x8

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x8) NotEqual(y Uint16x8) Mask16x8

// Asm: VPOR, CPU Feature: AVX
func (x Uint16x8) Or(y Uint16x8) Uint16x8

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHADDW, CPU Feature: AVX
func (x Uint16x8) PairwiseAdd(y Uint16x8) Uint16x8

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHSUBW, CPU Feature: AVX
func (x Uint16x8) PairwiseSub(y Uint16x8) Uint16x8

// Asm: VPADDSW, CPU Feature: AVX
func (x Uint16x8) SaturatedAdd(y Uint16x8) Uint16x8

// Asm: VPSUBSW, CPU Feature: AVX
func (x Uint16x8) SaturatedSub(y Uint16x8) Uint16x8

// Asm: VPSUBW, CPU Feature: AVX
func (x Uint16x8) Sub(y Uint16x8) Uint16x8

// Asm: VPXOR, CPU Feature: AVX
func (x Uint16x8) Xor(y Uint16x8) Uint16x8

// Asm: VPADDD, CPU Feature: AVX512EVEX
func (x Uint32x16) Add(y Uint32x16) Uint32x16

// Asm: VPANDD, CPU Feature: AVX512EVEX
func (x Uint32x16) And(y Uint32x16) Uint32x16

// Asm: VPANDND, CPU Feature: AVX512EVEX
func (x Uint32x16) AndNot(y Uint32x16) Uint32x16

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x16) Equal(y Uint32x16) Mask32x16

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x16) Greater(y Uint32x16) Mask32x16

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x16) GreaterEqual(y Uint32x16) Mask32x16

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x16) Less(y Uint32x16) Mask32x16

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x16) LessEqual(y Uint32x16) Mask32x16

// Asm: VPOPCNTD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedPopCount(y Mask32x16) Uint32x16

// Asm: VPMAXUD, CPU Feature: AVX512EVEX
func (x Uint32x16) Max(y Uint32x16) Uint32x16

// Asm: VPMINUD, CPU Feature: AVX512EVEX
func (x Uint32x16) Min(y Uint32x16) Uint32x16

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x16) NotEqual(y Uint32x16) Mask32x16

// Asm: VPORD, CPU Feature: AVX512EVEX
func (x Uint32x16) Or(y Uint32x16) Uint32x16

// Asm: VPSUBD, CPU Feature: AVX512EVEX
func (x Uint32x16) Sub(y Uint32x16) Uint32x16

// Asm: VPXORD, CPU Feature: AVX512EVEX
func (x Uint32x16) Xor(y Uint32x16) Uint32x16

// Asm: VPADDD, CPU Feature: AVX
func (x Uint32x4) Add(y Uint32x4) Uint32x4

// Asm: VPAND, CPU Feature: AVX
func (x Uint32x4) And(y Uint32x4) Uint32x4

// Asm: VPANDN, CPU Feature: AVX
func (x Uint32x4) AndNot(y Uint32x4) Uint32x4

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x4) Equal(y Uint32x4) Mask32x4

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x4) Greater(y Uint32x4) Mask32x4

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x4) GreaterEqual(y Uint32x4) Mask32x4

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x4) Less(y Uint32x4) Mask32x4

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x4) LessEqual(y Uint32x4) Mask32x4

// Asm: VPOPCNTD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedPopCount(y Mask32x4) Uint32x4

// Asm: VPMAXUD, CPU Feature: AVX
func (x Uint32x4) Max(y Uint32x4) Uint32x4

// Asm: VPMINUD, CPU Feature: AVX
func (x Uint32x4) Min(y Uint32x4) Uint32x4

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULUDQ, CPU Feature: AVX
func (x Uint32x4) MulEvenWiden(y Uint32x4) Uint64x2

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x4) NotEqual(y Uint32x4) Mask32x4

// Asm: VPOR, CPU Feature: AVX
func (x Uint32x4) Or(y Uint32x4) Uint32x4

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHADDD, CPU Feature: AVX
func (x Uint32x4) PairwiseAdd(y Uint32x4) Uint32x4

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHSUBD, CPU Feature: AVX
func (x Uint32x4) PairwiseSub(y Uint32x4) Uint32x4

// Asm: VPSUBD, CPU Feature: AVX
func (x Uint32x4) Sub(y Uint32x4) Uint32x4

// Asm: VPXOR, CPU Feature: AVX
func (x Uint32x4) Xor(y Uint32x4) Uint32x4

// Asm: VPADDD, CPU Feature: AVX2
func (x Uint32x8) Add(y Uint32x8) Uint32x8

// Asm: VPAND, CPU Feature: AVX2
func (x Uint32x8) And(y Uint32x8) Uint32x8

// Asm: VPANDN, CPU Feature: AVX2
func (x Uint32x8) AndNot(y Uint32x8) Uint32x8

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x8) Equal(y Uint32x8) Mask32x8

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x8) Greater(y Uint32x8) Mask32x8

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x8) GreaterEqual(y Uint32x8) Mask32x8

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x8) Less(y Uint32x8) Mask32x8

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x8) LessEqual(y Uint32x8) Mask32x8

// Asm: VPOPCNTD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedPopCount(y Mask32x8) Uint32x8

// Asm: VPMAXUD, CPU Feature: AVX2
func (x Uint32x8) Max(y Uint32x8) Uint32x8

// Asm: VPMINUD, CPU Feature: AVX2
func (x Uint32x8) Min(y Uint32x8) Uint32x8

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULUDQ, CPU Feature: AVX2
func (x Uint32x8) MulEvenWiden(y Uint32x8) Uint64x4

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x8) NotEqual(y Uint32x8) Mask32x8

// Asm: VPOR, CPU Feature: AVX2
func (x Uint32x8) Or(y Uint32x8) Uint32x8

// Add pairs of elements in vector x and store them in higher half of the target; Add pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHADDD, CPU Feature: AVX2
func (x Uint32x8) PairwiseAdd(y Uint32x8) Uint32x8

// Sub pairs of elements in vector x and store them in higher half of the target; Sub pairs of elements in vector y and store them in lower half of the target
//
// Asm: VPHSUBD, CPU Feature: AVX2
func (x Uint32x8) PairwiseSub(y Uint32x8) Uint32x8

// Asm: VPSUBD, CPU Feature: AVX2
func (x Uint32x8) Sub(y Uint32x8) Uint32x8

// Asm: VPXOR, CPU Feature: AVX2
func (x Uint32x8) Xor(y Uint32x8) Uint32x8

// Asm: VPADDQ, CPU Feature: AVX
func (x Uint64x2) Add(y Uint64x2) Uint64x2

// Asm: VPAND, CPU Feature: AVX
func (x Uint64x2) And(y Uint64x2) Uint64x2

// Asm: VPANDN, CPU Feature: AVX
func (x Uint64x2) AndNot(y Uint64x2) Uint64x2

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) Equal(y Uint64x2) Mask64x2

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) Greater(y Uint64x2) Mask64x2

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) GreaterEqual(y Uint64x2) Mask64x2

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) Less(y Uint64x2) Mask64x2

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) LessEqual(y Uint64x2) Mask64x2

// Asm: VPOPCNTQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedPopCount(y Mask64x2) Uint64x2

// Asm: VPMAXUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) Max(y Uint64x2) Uint64x2

// Asm: VPMINUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) Min(y Uint64x2) Uint64x2

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULUDQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MulEvenWiden(y Uint64x2) Uint64x2

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) NotEqual(y Uint64x2) Mask64x2

// Asm: VPOR, CPU Feature: AVX
func (x Uint64x2) Or(y Uint64x2) Uint64x2

// Asm: VPSUBQ, CPU Feature: AVX
func (x Uint64x2) Sub(y Uint64x2) Uint64x2

// Asm: VPXOR, CPU Feature: AVX
func (x Uint64x2) Xor(y Uint64x2) Uint64x2

// Asm: VPADDQ, CPU Feature: AVX2
func (x Uint64x4) Add(y Uint64x4) Uint64x4

// Asm: VPAND, CPU Feature: AVX2
func (x Uint64x4) And(y Uint64x4) Uint64x4

// Asm: VPANDN, CPU Feature: AVX2
func (x Uint64x4) AndNot(y Uint64x4) Uint64x4

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) Equal(y Uint64x4) Mask64x4

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) Greater(y Uint64x4) Mask64x4

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) GreaterEqual(y Uint64x4) Mask64x4

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) Less(y Uint64x4) Mask64x4

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) LessEqual(y Uint64x4) Mask64x4

// Asm: VPOPCNTQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedPopCount(y Mask64x4) Uint64x4

// Asm: VPMAXUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) Max(y Uint64x4) Uint64x4

// Asm: VPMINUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) Min(y Uint64x4) Uint64x4

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULUDQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MulEvenWiden(y Uint64x4) Uint64x4

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) NotEqual(y Uint64x4) Mask64x4

// Asm: VPOR, CPU Feature: AVX2
func (x Uint64x4) Or(y Uint64x4) Uint64x4

// Asm: VPSUBQ, CPU Feature: AVX2
func (x Uint64x4) Sub(y Uint64x4) Uint64x4

// Asm: VPXOR, CPU Feature: AVX2
func (x Uint64x4) Xor(y Uint64x4) Uint64x4

// Asm: VPADDQ, CPU Feature: AVX512EVEX
func (x Uint64x8) Add(y Uint64x8) Uint64x8

// Asm: VPANDQ, CPU Feature: AVX512EVEX
func (x Uint64x8) And(y Uint64x8) Uint64x8

// Asm: VPANDNQ, CPU Feature: AVX512EVEX
func (x Uint64x8) AndNot(y Uint64x8) Uint64x8

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) Equal(y Uint64x8) Mask64x8

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) Greater(y Uint64x8) Mask64x8

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) GreaterEqual(y Uint64x8) Mask64x8

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) Less(y Uint64x8) Mask64x8

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) LessEqual(y Uint64x8) Mask64x8

// Asm: VPOPCNTQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedPopCount(y Mask64x8) Uint64x8

// Asm: VPMAXUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) Max(y Uint64x8) Uint64x8

// Asm: VPMINUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) Min(y Uint64x8) Uint64x8

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULUDQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MulEvenWiden(y Uint64x8) Uint64x8

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) NotEqual(y Uint64x8) Mask64x8

// Asm: VPORQ, CPU Feature: AVX512EVEX
func (x Uint64x8) Or(y Uint64x8) Uint64x8

// Asm: VPSUBQ, CPU Feature: AVX512EVEX
func (x Uint64x8) Sub(y Uint64x8) Uint64x8

// Asm: VPXORQ, CPU Feature: AVX512EVEX
func (x Uint64x8) Xor(y Uint64x8) Uint64x8

// Asm: VPADDB, CPU Feature: AVX
func (x Uint8x16) Add(y Uint8x16) Uint8x16

// Asm: VPAND, CPU Feature: AVX
func (x Uint8x16) And(y Uint8x16) Uint8x16

// Asm: VPANDN, CPU Feature: AVX
func (x Uint8x16) AndNot(y Uint8x16) Uint8x16

// Asm: VPAVGB, CPU Feature: AVX
func (x Uint8x16) Average(y Uint8x16) Uint8x16

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x16) Equal(y Uint8x16) Mask8x16

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x16) Greater(y Uint8x16) Mask8x16

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x16) GreaterEqual(y Uint8x16) Mask8x16

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x16) Less(y Uint8x16) Mask8x16

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x16) LessEqual(y Uint8x16) Mask8x16

// Asm: VPOPCNTB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedPopCount(y Mask8x16) Uint8x16

// Asm: VPMAXUB, CPU Feature: AVX
func (x Uint8x16) Max(y Uint8x16) Uint8x16

// Asm: VPMINUB, CPU Feature: AVX
func (x Uint8x16) Min(y Uint8x16) Uint8x16

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x16) NotEqual(y Uint8x16) Mask8x16

// Asm: VPOR, CPU Feature: AVX
func (x Uint8x16) Or(y Uint8x16) Uint8x16

// Asm: VPADDSB, CPU Feature: AVX
func (x Uint8x16) SaturatedAdd(y Uint8x16) Uint8x16

// Asm: VPSUBSB, CPU Feature: AVX
func (x Uint8x16) SaturatedSub(y Uint8x16) Uint8x16

// Asm: VPSUBB, CPU Feature: AVX
func (x Uint8x16) Sub(y Uint8x16) Uint8x16

// Asm: VPXOR, CPU Feature: AVX
func (x Uint8x16) Xor(y Uint8x16) Uint8x16

// Asm: VPADDB, CPU Feature: AVX2
func (x Uint8x32) Add(y Uint8x32) Uint8x32

// Asm: VPAND, CPU Feature: AVX2
func (x Uint8x32) And(y Uint8x32) Uint8x32

// Asm: VPANDN, CPU Feature: AVX2
func (x Uint8x32) AndNot(y Uint8x32) Uint8x32

// Asm: VPAVGB, CPU Feature: AVX2
func (x Uint8x32) Average(y Uint8x32) Uint8x32

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x32) Equal(y Uint8x32) Mask8x32

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x32) Greater(y Uint8x32) Mask8x32

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x32) GreaterEqual(y Uint8x32) Mask8x32

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x32) Less(y Uint8x32) Mask8x32

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x32) LessEqual(y Uint8x32) Mask8x32

// Asm: VPOPCNTB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedPopCount(y Mask8x32) Uint8x32

// Asm: VPMAXUB, CPU Feature: AVX2
func (x Uint8x32) Max(y Uint8x32) Uint8x32

// Asm: VPMINUB, CPU Feature: AVX2
func (x Uint8x32) Min(y Uint8x32) Uint8x32

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x32) NotEqual(y Uint8x32) Mask8x32

// Asm: VPOR, CPU Feature: AVX2
func (x Uint8x32) Or(y Uint8x32) Uint8x32

// Asm: VPADDSB, CPU Feature: AVX2
func (x Uint8x32) SaturatedAdd(y Uint8x32) Uint8x32

// Asm: VPSUBSB, CPU Feature: AVX2
func (x Uint8x32) SaturatedSub(y Uint8x32) Uint8x32

// Asm: VPSUBB, CPU Feature: AVX2
func (x Uint8x32) Sub(y Uint8x32) Uint8x32

// Asm: VPXOR, CPU Feature: AVX2
func (x Uint8x32) Xor(y Uint8x32) Uint8x32

// Asm: VPADDB, CPU Feature: AVX512EVEX
func (x Uint8x64) Add(y Uint8x64) Uint8x64

// Asm: VPAVGB, CPU Feature: AVX512EVEX
func (x Uint8x64) Average(y Uint8x64) Uint8x64

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x64) Equal(y Uint8x64) Mask8x64

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x64) Greater(y Uint8x64) Mask8x64

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x64) GreaterEqual(y Uint8x64) Mask8x64

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x64) Less(y Uint8x64) Mask8x64

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x64) LessEqual(y Uint8x64) Mask8x64

// Asm: VPOPCNTB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedPopCount(y Mask8x64) Uint8x64

// Asm: VPMAXUB, CPU Feature: AVX512EVEX
func (x Uint8x64) Max(y Uint8x64) Uint8x64

// Asm: VPMINUB, CPU Feature: AVX512EVEX
func (x Uint8x64) Min(y Uint8x64) Uint8x64

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x64) NotEqual(y Uint8x64) Mask8x64

// Asm: VPADDSB, CPU Feature: AVX512EVEX
func (x Uint8x64) SaturatedAdd(y Uint8x64) Uint8x64

// Asm: VPSUBSB, CPU Feature: AVX512EVEX
func (x Uint8x64) SaturatedSub(y Uint8x64) Uint8x64

// Asm: VPSUBB, CPU Feature: AVX512EVEX
func (x Uint8x64) Sub(y Uint8x64) Uint8x64

// Asm: VADDPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedAdd(y Float32x16, z Mask32x16) Float32x16

// Asm: VANDPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedAnd(y Float32x16, z Mask32x16) Float32x16

// Asm: VANDNPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedAndNot(y Float32x16, z Mask32x16) Float32x16

// Asm: VDIVPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedDiv(y Float32x16, z Mask32x16) Float32x16

// Predicate immediate is 0 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedEqual(y Float32x16, z Mask32x16) Mask32x16

// Predicate immediate is 6 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedGreater(y Float32x16, z Mask32x16) Mask32x16

// Predicate immediate is 5 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedGreaterEqual(y Float32x16, z Mask32x16) Mask32x16

// Predicate immediate is 3 if it has; Returns mask element True if either one of the input\'s element is Nan; Please use this method as x\.IsNan\(x\) to check x only;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedIsNan(y Float32x16, z Mask32x16) Mask32x16

// Predicate immediate is 1 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedLess(y Float32x16, z Mask32x16) Mask32x16

// Predicate immediate is 2 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedLessEqual(y Float32x16, z Mask32x16) Mask32x16

// Asm: VMAXPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedMax(y Float32x16, z Mask32x16) Float32x16

// Asm: VMINPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedMin(y Float32x16, z Mask32x16) Float32x16

// Asm: VMULPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedMul(y Float32x16, z Mask32x16) Float32x16

// Asm: VSCALEFPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedMulByPowOf2(y Float32x16, z Mask32x16) Float32x16

// Predicate immediate is 4 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedNotEqual(y Float32x16, z Mask32x16) Mask32x16

// Asm: VORPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedOr(y Float32x16, z Mask32x16) Float32x16

// Asm: VADDPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedSub(y Float32x16, z Mask32x16) Float32x16

// Asm: VXORPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedXor(y Float32x16, z Mask32x16) Float32x16

// Asm: VADDPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedAdd(y Float32x4, z Mask32x4) Float32x4

// Asm: VANDPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedAnd(y Float32x4, z Mask32x4) Float32x4

// Asm: VANDNPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedAndNot(y Float32x4, z Mask32x4) Float32x4

// Asm: VDIVPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedDiv(y Float32x4, z Mask32x4) Float32x4

// Predicate immediate is 0 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedEqual(y Float32x4, z Mask32x4) Mask32x4

// Predicate immediate is 6 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedGreater(y Float32x4, z Mask32x4) Mask32x4

// Predicate immediate is 5 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedGreaterEqual(y Float32x4, z Mask32x4) Mask32x4

// Predicate immediate is 3 if it has; Returns mask element True if either one of the input\'s element is Nan; Please use this method as x\.IsNan\(x\) to check x only;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedIsNan(y Float32x4, z Mask32x4) Mask32x4

// Predicate immediate is 1 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedLess(y Float32x4, z Mask32x4) Mask32x4

// Predicate immediate is 2 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedLessEqual(y Float32x4, z Mask32x4) Mask32x4

// Asm: VMAXPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedMax(y Float32x4, z Mask32x4) Float32x4

// Asm: VMINPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedMin(y Float32x4, z Mask32x4) Float32x4

// Asm: VMULPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedMul(y Float32x4, z Mask32x4) Float32x4

// Asm: VSCALEFPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedMulByPowOf2(y Float32x4, z Mask32x4) Float32x4

// Predicate immediate is 4 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedNotEqual(y Float32x4, z Mask32x4) Mask32x4

// Asm: VORPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedOr(y Float32x4, z Mask32x4) Float32x4

// Asm: VADDPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedSub(y Float32x4, z Mask32x4) Float32x4

// Asm: VXORPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedXor(y Float32x4, z Mask32x4) Float32x4

// Asm: VADDPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedAdd(y Float32x8, z Mask32x8) Float32x8

// Asm: VANDPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedAnd(y Float32x8, z Mask32x8) Float32x8

// Asm: VANDNPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedAndNot(y Float32x8, z Mask32x8) Float32x8

// Asm: VDIVPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedDiv(y Float32x8, z Mask32x8) Float32x8

// Predicate immediate is 0 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedEqual(y Float32x8, z Mask32x8) Mask32x8

// Predicate immediate is 6 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedGreater(y Float32x8, z Mask32x8) Mask32x8

// Predicate immediate is 5 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedGreaterEqual(y Float32x8, z Mask32x8) Mask32x8

// Predicate immediate is 3 if it has; Returns mask element True if either one of the input\'s element is Nan; Please use this method as x\.IsNan\(x\) to check x only;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedIsNan(y Float32x8, z Mask32x8) Mask32x8

// Predicate immediate is 1 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedLess(y Float32x8, z Mask32x8) Mask32x8

// Predicate immediate is 2 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedLessEqual(y Float32x8, z Mask32x8) Mask32x8

// Asm: VMAXPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedMax(y Float32x8, z Mask32x8) Float32x8

// Asm: VMINPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedMin(y Float32x8, z Mask32x8) Float32x8

// Asm: VMULPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedMul(y Float32x8, z Mask32x8) Float32x8

// Asm: VSCALEFPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedMulByPowOf2(y Float32x8, z Mask32x8) Float32x8

// Predicate immediate is 4 if it has;
//
// Asm: VCMPPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedNotEqual(y Float32x8, z Mask32x8) Mask32x8

// Asm: VORPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedOr(y Float32x8, z Mask32x8) Float32x8

// Asm: VADDPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedSub(y Float32x8, z Mask32x8) Float32x8

// Asm: VXORPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedXor(y Float32x8, z Mask32x8) Float32x8

// Asm: VADDPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedAdd(y Float64x2, z Mask64x2) Float64x2

// Asm: VANDPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedAnd(y Float64x2, z Mask64x2) Float64x2

// Asm: VANDNPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedAndNot(y Float64x2, z Mask64x2) Float64x2

// Asm: VDIVPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedDiv(y Float64x2, z Mask64x2) Float64x2

// Predicate immediate is 0 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedEqual(y Float64x2, z Mask64x2) Mask64x2

// Predicate immediate is 6 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedGreater(y Float64x2, z Mask64x2) Mask64x2

// Predicate immediate is 5 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedGreaterEqual(y Float64x2, z Mask64x2) Mask64x2

// Predicate immediate is 3 if it has; Returns mask element True if either one of the input\'s element is Nan; Please use this method as x\.IsNan\(x\) to check x only;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedIsNan(y Float64x2, z Mask64x2) Mask64x2

// Predicate immediate is 1 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedLess(y Float64x2, z Mask64x2) Mask64x2

// Predicate immediate is 2 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedLessEqual(y Float64x2, z Mask64x2) Mask64x2

// Asm: VMAXPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedMax(y Float64x2, z Mask64x2) Float64x2

// Asm: VMINPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedMin(y Float64x2, z Mask64x2) Float64x2

// Asm: VMULPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedMul(y Float64x2, z Mask64x2) Float64x2

// Asm: VSCALEFPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedMulByPowOf2(y Float64x2, z Mask64x2) Float64x2

// Predicate immediate is 4 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedNotEqual(y Float64x2, z Mask64x2) Mask64x2

// Asm: VORPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedOr(y Float64x2, z Mask64x2) Float64x2

// Asm: VADDPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedSub(y Float64x2, z Mask64x2) Float64x2

// Asm: VXORPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedXor(y Float64x2, z Mask64x2) Float64x2

// Asm: VADDPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedAdd(y Float64x4, z Mask64x4) Float64x4

// Asm: VANDPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedAnd(y Float64x4, z Mask64x4) Float64x4

// Asm: VANDNPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedAndNot(y Float64x4, z Mask64x4) Float64x4

// Asm: VDIVPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedDiv(y Float64x4, z Mask64x4) Float64x4

// Predicate immediate is 0 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedEqual(y Float64x4, z Mask64x4) Mask64x4

// Predicate immediate is 6 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedGreater(y Float64x4, z Mask64x4) Mask64x4

// Predicate immediate is 5 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedGreaterEqual(y Float64x4, z Mask64x4) Mask64x4

// Predicate immediate is 3 if it has; Returns mask element True if either one of the input\'s element is Nan; Please use this method as x\.IsNan\(x\) to check x only;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedIsNan(y Float64x4, z Mask64x4) Mask64x4

// Predicate immediate is 1 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedLess(y Float64x4, z Mask64x4) Mask64x4

// Predicate immediate is 2 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedLessEqual(y Float64x4, z Mask64x4) Mask64x4

// Asm: VMAXPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedMax(y Float64x4, z Mask64x4) Float64x4

// Asm: VMINPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedMin(y Float64x4, z Mask64x4) Float64x4

// Asm: VMULPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedMul(y Float64x4, z Mask64x4) Float64x4

// Asm: VSCALEFPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedMulByPowOf2(y Float64x4, z Mask64x4) Float64x4

// Predicate immediate is 4 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedNotEqual(y Float64x4, z Mask64x4) Mask64x4

// Asm: VORPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedOr(y Float64x4, z Mask64x4) Float64x4

// Asm: VADDPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedSub(y Float64x4, z Mask64x4) Float64x4

// Asm: VXORPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedXor(y Float64x4, z Mask64x4) Float64x4

// Asm: VADDPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedAdd(y Float64x8, z Mask64x8) Float64x8

// Asm: VANDPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedAnd(y Float64x8, z Mask64x8) Float64x8

// Asm: VANDNPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedAndNot(y Float64x8, z Mask64x8) Float64x8

// Asm: VDIVPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedDiv(y Float64x8, z Mask64x8) Float64x8

// Predicate immediate is 0 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedEqual(y Float64x8, z Mask64x8) Mask64x8

// Predicate immediate is 6 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedGreater(y Float64x8, z Mask64x8) Mask64x8

// Predicate immediate is 5 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedGreaterEqual(y Float64x8, z Mask64x8) Mask64x8

// Predicate immediate is 3 if it has; Returns mask element True if either one of the input\'s element is Nan; Please use this method as x\.IsNan\(x\) to check x only;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedIsNan(y Float64x8, z Mask64x8) Mask64x8

// Predicate immediate is 1 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedLess(y Float64x8, z Mask64x8) Mask64x8

// Predicate immediate is 2 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedLessEqual(y Float64x8, z Mask64x8) Mask64x8

// Asm: VMAXPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedMax(y Float64x8, z Mask64x8) Float64x8

// Asm: VMINPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedMin(y Float64x8, z Mask64x8) Float64x8

// Asm: VMULPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedMul(y Float64x8, z Mask64x8) Float64x8

// Asm: VSCALEFPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedMulByPowOf2(y Float64x8, z Mask64x8) Float64x8

// Predicate immediate is 4 if it has;
//
// Asm: VCMPPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedNotEqual(y Float64x8, z Mask64x8) Mask64x8

// Asm: VORPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedOr(y Float64x8, z Mask64x8) Float64x8

// Asm: VADDPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedSub(y Float64x8, z Mask64x8) Float64x8

// Asm: VXORPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedXor(y Float64x8, z Mask64x8) Float64x8

// Asm: VPADDW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedAdd(y Int16x16, z Mask16x16) Int16x16

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedEqual(y Int16x16, z Mask16x16) Mask16x16

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedGreater(y Int16x16, z Mask16x16) Mask16x16

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedGreaterEqual(y Int16x16, z Mask16x16) Mask16x16

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedLess(y Int16x16, z Mask16x16) Mask16x16

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedLessEqual(y Int16x16, z Mask16x16) Mask16x16

// Asm: VPMAXSW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedMax(y Int16x16, z Mask16x16) Int16x16

// Asm: VPMINSW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedMin(y Int16x16, z Mask16x16) Int16x16

// Multiplies the elements from the two sources of size X at index i, store the high X bits of the result of size 2X at index i
//
// Asm: VPMULHW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedMulHigh(y Int16x16, z Mask16x16) Int16x16

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedMulLow(y Int16x16, z Mask16x16) Int16x16

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedNotEqual(y Int16x16, z Mask16x16) Mask16x16

// Asm: VPADDSW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedSaturatedAdd(y Int16x16, z Mask16x16) Int16x16

// Asm: VPSUBSW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedSaturatedSub(y Int16x16, z Mask16x16) Int16x16

// Asm: VPSUBW, CPU Feature: AVX512EVEX
func (x Int16x16) MaskedSub(y Int16x16, z Mask16x16) Int16x16

// Asm: VPADDW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedAdd(y Int16x32, z Mask16x32) Int16x32

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedEqual(y Int16x32, z Mask16x32) Mask16x32

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedGreater(y Int16x32, z Mask16x32) Mask16x32

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedGreaterEqual(y Int16x32, z Mask16x32) Mask16x32

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedLess(y Int16x32, z Mask16x32) Mask16x32

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedLessEqual(y Int16x32, z Mask16x32) Mask16x32

// Asm: VPMAXSW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedMax(y Int16x32, z Mask16x32) Int16x32

// Asm: VPMINSW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedMin(y Int16x32, z Mask16x32) Int16x32

// Multiplies the elements from the two sources of size X at index i, store the high X bits of the result of size 2X at index i
//
// Asm: VPMULHW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedMulHigh(y Int16x32, z Mask16x32) Int16x32

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedMulLow(y Int16x32, z Mask16x32) Int16x32

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedNotEqual(y Int16x32, z Mask16x32) Mask16x32

// Asm: VPADDSW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedSaturatedAdd(y Int16x32, z Mask16x32) Int16x32

// Asm: VPSUBSW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedSaturatedSub(y Int16x32, z Mask16x32) Int16x32

// Asm: VPSUBW, CPU Feature: AVX512EVEX
func (x Int16x32) MaskedSub(y Int16x32, z Mask16x32) Int16x32

// Asm: VPADDW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedAdd(y Int16x8, z Mask16x8) Int16x8

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedEqual(y Int16x8, z Mask16x8) Mask16x8

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedGreater(y Int16x8, z Mask16x8) Mask16x8

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedGreaterEqual(y Int16x8, z Mask16x8) Mask16x8

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedLess(y Int16x8, z Mask16x8) Mask16x8

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedLessEqual(y Int16x8, z Mask16x8) Mask16x8

// Asm: VPMAXSW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedMax(y Int16x8, z Mask16x8) Int16x8

// Asm: VPMINSW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedMin(y Int16x8, z Mask16x8) Int16x8

// Multiplies the elements from the two sources of size X at index i, store the high X bits of the result of size 2X at index i
//
// Asm: VPMULHW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedMulHigh(y Int16x8, z Mask16x8) Int16x8

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedMulLow(y Int16x8, z Mask16x8) Int16x8

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedNotEqual(y Int16x8, z Mask16x8) Mask16x8

// Asm: VPADDSW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedSaturatedAdd(y Int16x8, z Mask16x8) Int16x8

// Asm: VPSUBSW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedSaturatedSub(y Int16x8, z Mask16x8) Int16x8

// Asm: VPSUBW, CPU Feature: AVX512EVEX
func (x Int16x8) MaskedSub(y Int16x8, z Mask16x8) Int16x8

// Asm: VPADDD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedAdd(y Int32x16, z Mask32x16) Int32x16

// Asm: VPANDD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedAnd(y Int32x16, z Mask32x16) Int32x16

// Asm: VPANDND, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedAndNot(y Int32x16, z Mask32x16) Int32x16

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedEqual(y Int32x16, z Mask32x16) Mask32x16

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedGreater(y Int32x16, z Mask32x16) Mask32x16

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedGreaterEqual(y Int32x16, z Mask32x16) Mask32x16

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedLess(y Int32x16, z Mask32x16) Mask32x16

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedLessEqual(y Int32x16, z Mask32x16) Mask32x16

// Asm: VPMAXSD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedMax(y Int32x16, z Mask32x16) Int32x16

// Asm: VPMINSD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedMin(y Int32x16, z Mask32x16) Int32x16

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedMulLow(y Int32x16, z Mask32x16) Int32x16

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedNotEqual(y Int32x16, z Mask32x16) Mask32x16

// Asm: VPORD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedOr(y Int32x16, z Mask32x16) Int32x16

// Asm: VPSUBD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedSub(y Int32x16, z Mask32x16) Int32x16

// Asm: VPXORD, CPU Feature: AVX512EVEX
func (x Int32x16) MaskedXor(y Int32x16, z Mask32x16) Int32x16

// Asm: VPADDD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedAdd(y Int32x4, z Mask32x4) Int32x4

// Asm: VPANDD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedAnd(y Int32x4, z Mask32x4) Int32x4

// Asm: VPANDND, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedAndNot(y Int32x4, z Mask32x4) Int32x4

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedEqual(y Int32x4, z Mask32x4) Mask32x4

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedGreater(y Int32x4, z Mask32x4) Mask32x4

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedGreaterEqual(y Int32x4, z Mask32x4) Mask32x4

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedLess(y Int32x4, z Mask32x4) Mask32x4

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedLessEqual(y Int32x4, z Mask32x4) Mask32x4

// Asm: VPMAXSD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedMax(y Int32x4, z Mask32x4) Int32x4

// Asm: VPMINSD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedMin(y Int32x4, z Mask32x4) Int32x4

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedMulLow(y Int32x4, z Mask32x4) Int32x4

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedNotEqual(y Int32x4, z Mask32x4) Mask32x4

// Asm: VPORD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedOr(y Int32x4, z Mask32x4) Int32x4

// Asm: VPSUBD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedSub(y Int32x4, z Mask32x4) Int32x4

// Asm: VPXORD, CPU Feature: AVX512EVEX
func (x Int32x4) MaskedXor(y Int32x4, z Mask32x4) Int32x4

// Asm: VPADDD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedAdd(y Int32x8, z Mask32x8) Int32x8

// Asm: VPANDD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedAnd(y Int32x8, z Mask32x8) Int32x8

// Asm: VPANDND, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedAndNot(y Int32x8, z Mask32x8) Int32x8

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedEqual(y Int32x8, z Mask32x8) Mask32x8

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedGreater(y Int32x8, z Mask32x8) Mask32x8

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedGreaterEqual(y Int32x8, z Mask32x8) Mask32x8

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedLess(y Int32x8, z Mask32x8) Mask32x8

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedLessEqual(y Int32x8, z Mask32x8) Mask32x8

// Asm: VPMAXSD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedMax(y Int32x8, z Mask32x8) Int32x8

// Asm: VPMINSD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedMin(y Int32x8, z Mask32x8) Int32x8

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedMulLow(y Int32x8, z Mask32x8) Int32x8

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedNotEqual(y Int32x8, z Mask32x8) Mask32x8

// Asm: VPORD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedOr(y Int32x8, z Mask32x8) Int32x8

// Asm: VPSUBD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedSub(y Int32x8, z Mask32x8) Int32x8

// Asm: VPXORD, CPU Feature: AVX512EVEX
func (x Int32x8) MaskedXor(y Int32x8, z Mask32x8) Int32x8

// Asm: VPADDQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedAdd(y Int64x2, z Mask64x2) Int64x2

// Asm: VPANDQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedAnd(y Int64x2, z Mask64x2) Int64x2

// Asm: VPANDNQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedAndNot(y Int64x2, z Mask64x2) Int64x2

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedEqual(y Int64x2, z Mask64x2) Mask64x2

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedGreater(y Int64x2, z Mask64x2) Mask64x2

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedGreaterEqual(y Int64x2, z Mask64x2) Mask64x2

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedLess(y Int64x2, z Mask64x2) Mask64x2

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedLessEqual(y Int64x2, z Mask64x2) Mask64x2

// Asm: VPMAXSQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedMax(y Int64x2, z Mask64x2) Int64x2

// Asm: VPMINSQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedMin(y Int64x2, z Mask64x2) Int64x2

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULDQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedMulEvenWiden(y Int64x2, z Mask64x2) Int64x2

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedMulLow(y Int64x2, z Mask64x2) Int64x2

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedNotEqual(y Int64x2, z Mask64x2) Mask64x2

// Asm: VPORQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedOr(y Int64x2, z Mask64x2) Int64x2

// Asm: VPSUBQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedSub(y Int64x2, z Mask64x2) Int64x2

// Asm: VPXORQ, CPU Feature: AVX512EVEX
func (x Int64x2) MaskedXor(y Int64x2, z Mask64x2) Int64x2

// Asm: VPADDQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedAdd(y Int64x4, z Mask64x4) Int64x4

// Asm: VPANDQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedAnd(y Int64x4, z Mask64x4) Int64x4

// Asm: VPANDNQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedAndNot(y Int64x4, z Mask64x4) Int64x4

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedEqual(y Int64x4, z Mask64x4) Mask64x4

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedGreater(y Int64x4, z Mask64x4) Mask64x4

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedGreaterEqual(y Int64x4, z Mask64x4) Mask64x4

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedLess(y Int64x4, z Mask64x4) Mask64x4

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedLessEqual(y Int64x4, z Mask64x4) Mask64x4

// Asm: VPMAXSQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedMax(y Int64x4, z Mask64x4) Int64x4

// Asm: VPMINSQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedMin(y Int64x4, z Mask64x4) Int64x4

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULDQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedMulEvenWiden(y Int64x4, z Mask64x4) Int64x4

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedMulLow(y Int64x4, z Mask64x4) Int64x4

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedNotEqual(y Int64x4, z Mask64x4) Mask64x4

// Asm: VPORQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedOr(y Int64x4, z Mask64x4) Int64x4

// Asm: VPSUBQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedSub(y Int64x4, z Mask64x4) Int64x4

// Asm: VPXORQ, CPU Feature: AVX512EVEX
func (x Int64x4) MaskedXor(y Int64x4, z Mask64x4) Int64x4

// Asm: VPADDQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedAdd(y Int64x8, z Mask64x8) Int64x8

// Asm: VPANDQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedAnd(y Int64x8, z Mask64x8) Int64x8

// Asm: VPANDNQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedAndNot(y Int64x8, z Mask64x8) Int64x8

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedEqual(y Int64x8, z Mask64x8) Mask64x8

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedGreater(y Int64x8, z Mask64x8) Mask64x8

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedGreaterEqual(y Int64x8, z Mask64x8) Mask64x8

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedLess(y Int64x8, z Mask64x8) Mask64x8

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedLessEqual(y Int64x8, z Mask64x8) Mask64x8

// Asm: VPMAXSQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedMax(y Int64x8, z Mask64x8) Int64x8

// Asm: VPMINSQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedMin(y Int64x8, z Mask64x8) Int64x8

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULDQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedMulEvenWiden(y Int64x8, z Mask64x8) Int64x8

// Multiplies the elements from the two sources of size X at index i, store the low X bits of the result of size 2X at index i
//
// Asm: VPMULLQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedMulLow(y Int64x8, z Mask64x8) Int64x8

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedNotEqual(y Int64x8, z Mask64x8) Mask64x8

// Asm: VPORQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedOr(y Int64x8, z Mask64x8) Int64x8

// Asm: VPSUBQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedSub(y Int64x8, z Mask64x8) Int64x8

// Asm: VPXORQ, CPU Feature: AVX512EVEX
func (x Int64x8) MaskedXor(y Int64x8, z Mask64x8) Int64x8

// Asm: VPADDB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedAdd(y Int8x16, z Mask8x16) Int8x16

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedEqual(y Int8x16, z Mask8x16) Mask8x16

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedGreater(y Int8x16, z Mask8x16) Mask8x16

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedGreaterEqual(y Int8x16, z Mask8x16) Mask8x16

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedLess(y Int8x16, z Mask8x16) Mask8x16

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedLessEqual(y Int8x16, z Mask8x16) Mask8x16

// Asm: VPMAXSB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedMax(y Int8x16, z Mask8x16) Int8x16

// Asm: VPMINSB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedMin(y Int8x16, z Mask8x16) Int8x16

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedNotEqual(y Int8x16, z Mask8x16) Mask8x16

// Asm: VPADDSB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedSaturatedAdd(y Int8x16, z Mask8x16) Int8x16

// Asm: VPSUBSB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedSaturatedSub(y Int8x16, z Mask8x16) Int8x16

// Asm: VPSUBB, CPU Feature: AVX512EVEX
func (x Int8x16) MaskedSub(y Int8x16, z Mask8x16) Int8x16

// Asm: VPADDB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedAdd(y Int8x32, z Mask8x32) Int8x32

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedEqual(y Int8x32, z Mask8x32) Mask8x32

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedGreater(y Int8x32, z Mask8x32) Mask8x32

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedGreaterEqual(y Int8x32, z Mask8x32) Mask8x32

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedLess(y Int8x32, z Mask8x32) Mask8x32

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedLessEqual(y Int8x32, z Mask8x32) Mask8x32

// Asm: VPMAXSB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedMax(y Int8x32, z Mask8x32) Int8x32

// Asm: VPMINSB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedMin(y Int8x32, z Mask8x32) Int8x32

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedNotEqual(y Int8x32, z Mask8x32) Mask8x32

// Asm: VPADDSB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedSaturatedAdd(y Int8x32, z Mask8x32) Int8x32

// Asm: VPSUBSB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedSaturatedSub(y Int8x32, z Mask8x32) Int8x32

// Asm: VPSUBB, CPU Feature: AVX512EVEX
func (x Int8x32) MaskedSub(y Int8x32, z Mask8x32) Int8x32

// Asm: VPADDB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedAdd(y Int8x64, z Mask8x64) Int8x64

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPEQB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedEqual(y Int8x64, z Mask8x64) Mask8x64

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPGTB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedGreater(y Int8x64, z Mask8x64) Mask8x64

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedGreaterEqual(y Int8x64, z Mask8x64) Mask8x64

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedLess(y Int8x64, z Mask8x64) Mask8x64

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedLessEqual(y Int8x64, z Mask8x64) Mask8x64

// Asm: VPMAXSB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedMax(y Int8x64, z Mask8x64) Int8x64

// Asm: VPMINSB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedMin(y Int8x64, z Mask8x64) Int8x64

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedNotEqual(y Int8x64, z Mask8x64) Mask8x64

// Asm: VPADDSB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedSaturatedAdd(y Int8x64, z Mask8x64) Int8x64

// Asm: VPSUBSB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedSaturatedSub(y Int8x64, z Mask8x64) Int8x64

// Asm: VPSUBB, CPU Feature: AVX512EVEX
func (x Int8x64) MaskedSub(y Int8x64, z Mask8x64) Int8x64

// Asm: VPADDW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedAdd(y Uint16x16, z Mask16x16) Uint16x16

// Asm: VPAVGW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedAverage(y Uint16x16, z Mask16x16) Uint16x16

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedEqual(y Uint16x16, z Mask16x16) Mask16x16

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedGreater(y Uint16x16, z Mask16x16) Mask16x16

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedGreaterEqual(y Uint16x16, z Mask16x16) Mask16x16

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedLess(y Uint16x16, z Mask16x16) Mask16x16

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedLessEqual(y Uint16x16, z Mask16x16) Mask16x16

// Asm: VPMAXUW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedMax(y Uint16x16, z Mask16x16) Uint16x16

// Asm: VPMINUW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedMin(y Uint16x16, z Mask16x16) Uint16x16

// Multiplies the elements from the two sources of size X at index i, store the high X bits of the result of size 2X at index i
//
// Asm: VPMULHUW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedMulHigh(y Uint16x16, z Mask16x16) Uint16x16

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedNotEqual(y Uint16x16, z Mask16x16) Mask16x16

// Asm: VPADDSW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedSaturatedAdd(y Uint16x16, z Mask16x16) Uint16x16

// Asm: VPSUBSW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedSaturatedSub(y Uint16x16, z Mask16x16) Uint16x16

// Asm: VPSUBW, CPU Feature: AVX512EVEX
func (x Uint16x16) MaskedSub(y Uint16x16, z Mask16x16) Uint16x16

// Asm: VPADDW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedAdd(y Uint16x32, z Mask16x32) Uint16x32

// Asm: VPAVGW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedAverage(y Uint16x32, z Mask16x32) Uint16x32

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedEqual(y Uint16x32, z Mask16x32) Mask16x32

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedGreater(y Uint16x32, z Mask16x32) Mask16x32

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedGreaterEqual(y Uint16x32, z Mask16x32) Mask16x32

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedLess(y Uint16x32, z Mask16x32) Mask16x32

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedLessEqual(y Uint16x32, z Mask16x32) Mask16x32

// Asm: VPMAXUW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedMax(y Uint16x32, z Mask16x32) Uint16x32

// Asm: VPMINUW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedMin(y Uint16x32, z Mask16x32) Uint16x32

// Multiplies the elements from the two sources of size X at index i, store the high X bits of the result of size 2X at index i
//
// Asm: VPMULHUW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedMulHigh(y Uint16x32, z Mask16x32) Uint16x32

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedNotEqual(y Uint16x32, z Mask16x32) Mask16x32

// Asm: VPADDSW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedSaturatedAdd(y Uint16x32, z Mask16x32) Uint16x32

// Asm: VPSUBSW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedSaturatedSub(y Uint16x32, z Mask16x32) Uint16x32

// Asm: VPSUBW, CPU Feature: AVX512EVEX
func (x Uint16x32) MaskedSub(y Uint16x32, z Mask16x32) Uint16x32

// Asm: VPADDW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedAdd(y Uint16x8, z Mask16x8) Uint16x8

// Asm: VPAVGW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedAverage(y Uint16x8, z Mask16x8) Uint16x8

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedEqual(y Uint16x8, z Mask16x8) Mask16x8

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedGreater(y Uint16x8, z Mask16x8) Mask16x8

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedGreaterEqual(y Uint16x8, z Mask16x8) Mask16x8

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedLess(y Uint16x8, z Mask16x8) Mask16x8

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedLessEqual(y Uint16x8, z Mask16x8) Mask16x8

// Asm: VPMAXUW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedMax(y Uint16x8, z Mask16x8) Uint16x8

// Asm: VPMINUW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedMin(y Uint16x8, z Mask16x8) Uint16x8

// Multiplies the elements from the two sources of size X at index i, store the high X bits of the result of size 2X at index i
//
// Asm: VPMULHUW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedMulHigh(y Uint16x8, z Mask16x8) Uint16x8

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedNotEqual(y Uint16x8, z Mask16x8) Mask16x8

// Asm: VPADDSW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedSaturatedAdd(y Uint16x8, z Mask16x8) Uint16x8

// Asm: VPSUBSW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedSaturatedSub(y Uint16x8, z Mask16x8) Uint16x8

// Asm: VPSUBW, CPU Feature: AVX512EVEX
func (x Uint16x8) MaskedSub(y Uint16x8, z Mask16x8) Uint16x8

// Asm: VPADDD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedAdd(y Uint32x16, z Mask32x16) Uint32x16

// Asm: VPANDD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedAnd(y Uint32x16, z Mask32x16) Uint32x16

// Asm: VPANDND, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedAndNot(y Uint32x16, z Mask32x16) Uint32x16

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedEqual(y Uint32x16, z Mask32x16) Mask32x16

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedGreater(y Uint32x16, z Mask32x16) Mask32x16

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedGreaterEqual(y Uint32x16, z Mask32x16) Mask32x16

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedLess(y Uint32x16, z Mask32x16) Mask32x16

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedLessEqual(y Uint32x16, z Mask32x16) Mask32x16

// Asm: VPMAXUD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedMax(y Uint32x16, z Mask32x16) Uint32x16

// Asm: VPMINUD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedMin(y Uint32x16, z Mask32x16) Uint32x16

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedNotEqual(y Uint32x16, z Mask32x16) Mask32x16

// Asm: VPORD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedOr(y Uint32x16, z Mask32x16) Uint32x16

// Asm: VPSUBD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedSub(y Uint32x16, z Mask32x16) Uint32x16

// Asm: VPXORD, CPU Feature: AVX512EVEX
func (x Uint32x16) MaskedXor(y Uint32x16, z Mask32x16) Uint32x16

// Asm: VPADDD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedAdd(y Uint32x4, z Mask32x4) Uint32x4

// Asm: VPANDD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedAnd(y Uint32x4, z Mask32x4) Uint32x4

// Asm: VPANDND, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedAndNot(y Uint32x4, z Mask32x4) Uint32x4

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedEqual(y Uint32x4, z Mask32x4) Mask32x4

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedGreater(y Uint32x4, z Mask32x4) Mask32x4

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedGreaterEqual(y Uint32x4, z Mask32x4) Mask32x4

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedLess(y Uint32x4, z Mask32x4) Mask32x4

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedLessEqual(y Uint32x4, z Mask32x4) Mask32x4

// Asm: VPMAXUD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedMax(y Uint32x4, z Mask32x4) Uint32x4

// Asm: VPMINUD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedMin(y Uint32x4, z Mask32x4) Uint32x4

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedNotEqual(y Uint32x4, z Mask32x4) Mask32x4

// Asm: VPORD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedOr(y Uint32x4, z Mask32x4) Uint32x4

// Asm: VPSUBD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedSub(y Uint32x4, z Mask32x4) Uint32x4

// Asm: VPXORD, CPU Feature: AVX512EVEX
func (x Uint32x4) MaskedXor(y Uint32x4, z Mask32x4) Uint32x4

// Asm: VPADDD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedAdd(y Uint32x8, z Mask32x8) Uint32x8

// Asm: VPANDD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedAnd(y Uint32x8, z Mask32x8) Uint32x8

// Asm: VPANDND, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedAndNot(y Uint32x8, z Mask32x8) Uint32x8

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedEqual(y Uint32x8, z Mask32x8) Mask32x8

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedGreater(y Uint32x8, z Mask32x8) Mask32x8

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedGreaterEqual(y Uint32x8, z Mask32x8) Mask32x8

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedLess(y Uint32x8, z Mask32x8) Mask32x8

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedLessEqual(y Uint32x8, z Mask32x8) Mask32x8

// Asm: VPMAXUD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedMax(y Uint32x8, z Mask32x8) Uint32x8

// Asm: VPMINUD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedMin(y Uint32x8, z Mask32x8) Uint32x8

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedNotEqual(y Uint32x8, z Mask32x8) Mask32x8

// Asm: VPORD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedOr(y Uint32x8, z Mask32x8) Uint32x8

// Asm: VPSUBD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedSub(y Uint32x8, z Mask32x8) Uint32x8

// Asm: VPXORD, CPU Feature: AVX512EVEX
func (x Uint32x8) MaskedXor(y Uint32x8, z Mask32x8) Uint32x8

// Asm: VPADDQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedAdd(y Uint64x2, z Mask64x2) Uint64x2

// Asm: VPANDQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedAnd(y Uint64x2, z Mask64x2) Uint64x2

// Asm: VPANDNQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedAndNot(y Uint64x2, z Mask64x2) Uint64x2

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedEqual(y Uint64x2, z Mask64x2) Mask64x2

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedGreater(y Uint64x2, z Mask64x2) Mask64x2

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedGreaterEqual(y Uint64x2, z Mask64x2) Mask64x2

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedLess(y Uint64x2, z Mask64x2) Mask64x2

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedLessEqual(y Uint64x2, z Mask64x2) Mask64x2

// Asm: VPMAXUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedMax(y Uint64x2, z Mask64x2) Uint64x2

// Asm: VPMINUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedMin(y Uint64x2, z Mask64x2) Uint64x2

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULUDQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedMulEvenWiden(y Uint64x2, z Mask64x2) Uint64x2

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedNotEqual(y Uint64x2, z Mask64x2) Mask64x2

// Asm: VPORQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedOr(y Uint64x2, z Mask64x2) Uint64x2

// Asm: VPSUBQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedSub(y Uint64x2, z Mask64x2) Uint64x2

// Asm: VPXORQ, CPU Feature: AVX512EVEX
func (x Uint64x2) MaskedXor(y Uint64x2, z Mask64x2) Uint64x2

// Asm: VPADDQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedAdd(y Uint64x4, z Mask64x4) Uint64x4

// Asm: VPANDQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedAnd(y Uint64x4, z Mask64x4) Uint64x4

// Asm: VPANDNQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedAndNot(y Uint64x4, z Mask64x4) Uint64x4

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedEqual(y Uint64x4, z Mask64x4) Mask64x4

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedGreater(y Uint64x4, z Mask64x4) Mask64x4

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedGreaterEqual(y Uint64x4, z Mask64x4) Mask64x4

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedLess(y Uint64x4, z Mask64x4) Mask64x4

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedLessEqual(y Uint64x4, z Mask64x4) Mask64x4

// Asm: VPMAXUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedMax(y Uint64x4, z Mask64x4) Uint64x4

// Asm: VPMINUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedMin(y Uint64x4, z Mask64x4) Uint64x4

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULUDQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedMulEvenWiden(y Uint64x4, z Mask64x4) Uint64x4

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedNotEqual(y Uint64x4, z Mask64x4) Mask64x4

// Asm: VPORQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedOr(y Uint64x4, z Mask64x4) Uint64x4

// Asm: VPSUBQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedSub(y Uint64x4, z Mask64x4) Uint64x4

// Asm: VPXORQ, CPU Feature: AVX512EVEX
func (x Uint64x4) MaskedXor(y Uint64x4, z Mask64x4) Uint64x4

// Asm: VPADDQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedAdd(y Uint64x8, z Mask64x8) Uint64x8

// Asm: VPANDQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedAnd(y Uint64x8, z Mask64x8) Uint64x8

// Asm: VPANDNQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedAndNot(y Uint64x8, z Mask64x8) Uint64x8

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedEqual(y Uint64x8, z Mask64x8) Mask64x8

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedGreater(y Uint64x8, z Mask64x8) Mask64x8

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedGreaterEqual(y Uint64x8, z Mask64x8) Mask64x8

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedLess(y Uint64x8, z Mask64x8) Mask64x8

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedLessEqual(y Uint64x8, z Mask64x8) Mask64x8

// Asm: VPMAXUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedMax(y Uint64x8, z Mask64x8) Uint64x8

// Asm: VPMINUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedMin(y Uint64x8, z Mask64x8) Uint64x8

// Multiplies the even index elements from the two sources of size X at index i, store the result of size 2X at index i/2
//
// Asm: VPMULUDQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedMulEvenWiden(y Uint64x8, z Mask64x8) Uint64x8

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedNotEqual(y Uint64x8, z Mask64x8) Mask64x8

// Asm: VPORQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedOr(y Uint64x8, z Mask64x8) Uint64x8

// Asm: VPSUBQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedSub(y Uint64x8, z Mask64x8) Uint64x8

// Asm: VPXORQ, CPU Feature: AVX512EVEX
func (x Uint64x8) MaskedXor(y Uint64x8, z Mask64x8) Uint64x8

// Asm: VPADDB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedAdd(y Uint8x16, z Mask8x16) Uint8x16

// Asm: VPAVGB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedAverage(y Uint8x16, z Mask8x16) Uint8x16

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedEqual(y Uint8x16, z Mask8x16) Mask8x16

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedGreater(y Uint8x16, z Mask8x16) Mask8x16

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedGreaterEqual(y Uint8x16, z Mask8x16) Mask8x16

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedLess(y Uint8x16, z Mask8x16) Mask8x16

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedLessEqual(y Uint8x16, z Mask8x16) Mask8x16

// Asm: VPMAXUB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedMax(y Uint8x16, z Mask8x16) Uint8x16

// Asm: VPMINUB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedMin(y Uint8x16, z Mask8x16) Uint8x16

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedNotEqual(y Uint8x16, z Mask8x16) Mask8x16

// Asm: VPADDSB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedSaturatedAdd(y Uint8x16, z Mask8x16) Uint8x16

// Asm: VPSUBSB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedSaturatedSub(y Uint8x16, z Mask8x16) Uint8x16

// Asm: VPSUBB, CPU Feature: AVX512EVEX
func (x Uint8x16) MaskedSub(y Uint8x16, z Mask8x16) Uint8x16

// Asm: VPADDB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedAdd(y Uint8x32, z Mask8x32) Uint8x32

// Asm: VPAVGB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedAverage(y Uint8x32, z Mask8x32) Uint8x32

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedEqual(y Uint8x32, z Mask8x32) Mask8x32

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedGreater(y Uint8x32, z Mask8x32) Mask8x32

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedGreaterEqual(y Uint8x32, z Mask8x32) Mask8x32

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedLess(y Uint8x32, z Mask8x32) Mask8x32

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedLessEqual(y Uint8x32, z Mask8x32) Mask8x32

// Asm: VPMAXUB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedMax(y Uint8x32, z Mask8x32) Uint8x32

// Asm: VPMINUB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedMin(y Uint8x32, z Mask8x32) Uint8x32

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedNotEqual(y Uint8x32, z Mask8x32) Mask8x32

// Asm: VPADDSB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedSaturatedAdd(y Uint8x32, z Mask8x32) Uint8x32

// Asm: VPSUBSB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedSaturatedSub(y Uint8x32, z Mask8x32) Uint8x32

// Asm: VPSUBB, CPU Feature: AVX512EVEX
func (x Uint8x32) MaskedSub(y Uint8x32, z Mask8x32) Uint8x32

// Asm: VPADDB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedAdd(y Uint8x64, z Mask8x64) Uint8x64

// Asm: VPAVGB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedAverage(y Uint8x64, z Mask8x64) Uint8x64

// Predicate immediate is 0 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedEqual(y Uint8x64, z Mask8x64) Mask8x64

// Predicate immediate is 6 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedGreater(y Uint8x64, z Mask8x64) Mask8x64

// Predicate immediate is 5 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedGreaterEqual(y Uint8x64, z Mask8x64) Mask8x64

// Predicate immediate is 1 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedLess(y Uint8x64, z Mask8x64) Mask8x64

// Predicate immediate is 2 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedLessEqual(y Uint8x64, z Mask8x64) Mask8x64

// Asm: VPMAXUB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedMax(y Uint8x64, z Mask8x64) Uint8x64

// Asm: VPMINUB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedMin(y Uint8x64, z Mask8x64) Uint8x64

// Predicate immediate is 4 if it has;
//
// Asm: VPCMPUB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedNotEqual(y Uint8x64, z Mask8x64) Mask8x64

// Asm: VPADDSB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedSaturatedAdd(y Uint8x64, z Mask8x64) Uint8x64

// Asm: VPSUBSB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedSaturatedSub(y Uint8x64, z Mask8x64) Uint8x64

// Asm: VPSUBB, CPU Feature: AVX512EVEX
func (x Uint8x64) MaskedSub(y Uint8x64, z Mask8x64) Uint8x64

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) CeilSuppressExceptionWithPrecision(imm8 uint8) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) CeilSuppressExceptionWithPrecision(imm8 uint8) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) CeilSuppressExceptionWithPrecision(imm8 uint8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) CeilSuppressExceptionWithPrecision(imm8 uint8) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) CeilSuppressExceptionWithPrecision(imm8 uint8) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) CeilSuppressExceptionWithPrecision(imm8 uint8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) CeilWithPrecision(imm8 uint8) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) CeilWithPrecision(imm8 uint8) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) CeilWithPrecision(imm8 uint8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) CeilWithPrecision(imm8 uint8) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) CeilWithPrecision(imm8 uint8) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) CeilWithPrecision(imm8 uint8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) DiffWithCeilSuppressExceptionWithPrecision(imm8 uint8) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) DiffWithCeilSuppressExceptionWithPrecision(imm8 uint8) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) DiffWithCeilSuppressExceptionWithPrecision(imm8 uint8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) DiffWithCeilSuppressExceptionWithPrecision(imm8 uint8) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) DiffWithCeilSuppressExceptionWithPrecision(imm8 uint8) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) DiffWithCeilSuppressExceptionWithPrecision(imm8 uint8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) DiffWithCeilWithPrecision(imm8 uint8) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) DiffWithCeilWithPrecision(imm8 uint8) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) DiffWithCeilWithPrecision(imm8 uint8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) DiffWithCeilWithPrecision(imm8 uint8) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) DiffWithCeilWithPrecision(imm8 uint8) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) DiffWithCeilWithPrecision(imm8 uint8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) DiffWithFloorSuppressExceptionWithPrecision(imm8 uint8) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) DiffWithFloorSuppressExceptionWithPrecision(imm8 uint8) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) DiffWithFloorSuppressExceptionWithPrecision(imm8 uint8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) DiffWithFloorSuppressExceptionWithPrecision(imm8 uint8) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) DiffWithFloorSuppressExceptionWithPrecision(imm8 uint8) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) DiffWithFloorSuppressExceptionWithPrecision(imm8 uint8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) DiffWithFloorWithPrecision(imm8 uint8) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) DiffWithFloorWithPrecision(imm8 uint8) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) DiffWithFloorWithPrecision(imm8 uint8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) DiffWithFloorWithPrecision(imm8 uint8) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) DiffWithFloorWithPrecision(imm8 uint8) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) DiffWithFloorWithPrecision(imm8 uint8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) DiffWithRoundSuppressExceptionWithPrecision(imm8 uint8) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) DiffWithRoundSuppressExceptionWithPrecision(imm8 uint8) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) DiffWithRoundSuppressExceptionWithPrecision(imm8 uint8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) DiffWithRoundSuppressExceptionWithPrecision(imm8 uint8) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) DiffWithRoundSuppressExceptionWithPrecision(imm8 uint8) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) DiffWithRoundSuppressExceptionWithPrecision(imm8 uint8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) DiffWithRoundWithPrecision(imm8 uint8) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) DiffWithRoundWithPrecision(imm8 uint8) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) DiffWithRoundWithPrecision(imm8 uint8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) DiffWithRoundWithPrecision(imm8 uint8) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) DiffWithRoundWithPrecision(imm8 uint8) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) DiffWithRoundWithPrecision(imm8 uint8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) DiffWithTruncSuppressExceptionWithPrecision(imm8 uint8) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) DiffWithTruncSuppressExceptionWithPrecision(imm8 uint8) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) DiffWithTruncSuppressExceptionWithPrecision(imm8 uint8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) DiffWithTruncSuppressExceptionWithPrecision(imm8 uint8) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) DiffWithTruncSuppressExceptionWithPrecision(imm8 uint8) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) DiffWithTruncSuppressExceptionWithPrecision(imm8 uint8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) DiffWithTruncWithPrecision(imm8 uint8) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) DiffWithTruncWithPrecision(imm8 uint8) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) DiffWithTruncWithPrecision(imm8 uint8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) DiffWithTruncWithPrecision(imm8 uint8) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) DiffWithTruncWithPrecision(imm8 uint8) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) DiffWithTruncWithPrecision(imm8 uint8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) FloorSuppressExceptionWithPrecision(imm8 uint8) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) FloorSuppressExceptionWithPrecision(imm8 uint8) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) FloorSuppressExceptionWithPrecision(imm8 uint8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) FloorSuppressExceptionWithPrecision(imm8 uint8) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) FloorSuppressExceptionWithPrecision(imm8 uint8) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) FloorSuppressExceptionWithPrecision(imm8 uint8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) FloorWithPrecision(imm8 uint8) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) FloorWithPrecision(imm8 uint8) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) FloorWithPrecision(imm8 uint8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) FloorWithPrecision(imm8 uint8) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) FloorWithPrecision(imm8 uint8) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) FloorWithPrecision(imm8 uint8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) RoundSuppressExceptionWithPrecision(imm8 uint8) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) RoundSuppressExceptionWithPrecision(imm8 uint8) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) RoundSuppressExceptionWithPrecision(imm8 uint8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) RoundSuppressExceptionWithPrecision(imm8 uint8) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) RoundSuppressExceptionWithPrecision(imm8 uint8) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) RoundSuppressExceptionWithPrecision(imm8 uint8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) RoundWithPrecision(imm8 uint8) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) RoundWithPrecision(imm8 uint8) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) RoundWithPrecision(imm8 uint8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) RoundWithPrecision(imm8 uint8) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) RoundWithPrecision(imm8 uint8) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) RoundWithPrecision(imm8 uint8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) TruncSuppressExceptionWithPrecision(imm8 uint8) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) TruncSuppressExceptionWithPrecision(imm8 uint8) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) TruncSuppressExceptionWithPrecision(imm8 uint8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) TruncSuppressExceptionWithPrecision(imm8 uint8) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) TruncSuppressExceptionWithPrecision(imm8 uint8) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) TruncSuppressExceptionWithPrecision(imm8 uint8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) TruncWithPrecision(imm8 uint8) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) TruncWithPrecision(imm8 uint8) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) TruncWithPrecision(imm8 uint8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) TruncWithPrecision(imm8 uint8) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) TruncWithPrecision(imm8 uint8) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) TruncWithPrecision(imm8 uint8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedCeilSuppressExceptionWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedCeilSuppressExceptionWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedCeilSuppressExceptionWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedCeilSuppressExceptionWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedCeilSuppressExceptionWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedCeilSuppressExceptionWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedCeilWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedCeilWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedCeilWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedCeilWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedCeilWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedCeilWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedDiffWithCeilSuppressExceptionWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedDiffWithCeilSuppressExceptionWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedDiffWithCeilSuppressExceptionWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedDiffWithCeilSuppressExceptionWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedDiffWithCeilSuppressExceptionWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedDiffWithCeilSuppressExceptionWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedDiffWithCeilWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedDiffWithCeilWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedDiffWithCeilWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedDiffWithCeilWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedDiffWithCeilWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedDiffWithCeilWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedDiffWithFloorSuppressExceptionWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedDiffWithFloorSuppressExceptionWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedDiffWithFloorSuppressExceptionWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedDiffWithFloorSuppressExceptionWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedDiffWithFloorSuppressExceptionWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedDiffWithFloorSuppressExceptionWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedDiffWithFloorWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedDiffWithFloorWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedDiffWithFloorWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedDiffWithFloorWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedDiffWithFloorWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedDiffWithFloorWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedDiffWithRoundSuppressExceptionWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedDiffWithRoundSuppressExceptionWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedDiffWithRoundSuppressExceptionWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedDiffWithRoundSuppressExceptionWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedDiffWithRoundSuppressExceptionWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedDiffWithRoundSuppressExceptionWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedDiffWithRoundWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedDiffWithRoundWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedDiffWithRoundWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedDiffWithRoundWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedDiffWithRoundWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedDiffWithRoundWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedDiffWithTruncSuppressExceptionWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedDiffWithTruncSuppressExceptionWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedDiffWithTruncSuppressExceptionWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedDiffWithTruncSuppressExceptionWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedDiffWithTruncSuppressExceptionWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedDiffWithTruncSuppressExceptionWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedDiffWithTruncWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedDiffWithTruncWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VREDUCEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedDiffWithTruncWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedDiffWithTruncWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedDiffWithTruncWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VREDUCEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedDiffWithTruncWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedFloorSuppressExceptionWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedFloorSuppressExceptionWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedFloorSuppressExceptionWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedFloorSuppressExceptionWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedFloorSuppressExceptionWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedFloorSuppressExceptionWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedFloorWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedFloorWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedFloorWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedFloorWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedFloorWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedFloorWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedRoundSuppressExceptionWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedRoundSuppressExceptionWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedRoundSuppressExceptionWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedRoundSuppressExceptionWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedRoundSuppressExceptionWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedRoundSuppressExceptionWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedRoundWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedRoundWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedRoundWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedRoundWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedRoundWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedRoundWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedTruncSuppressExceptionWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedTruncSuppressExceptionWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedTruncSuppressExceptionWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedTruncSuppressExceptionWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedTruncSuppressExceptionWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedTruncSuppressExceptionWithPrecision(imm uint8, y Mask64x8) Float64x8

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x16) MaskedTruncWithPrecision(imm uint8, y Mask32x16) Float32x16

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x4) MaskedTruncWithPrecision(imm uint8, y Mask32x4) Float32x4

// Asm: VRNDSCALEPS, CPU Feature: AVX512EVEX
func (x Float32x8) MaskedTruncWithPrecision(imm uint8, y Mask32x8) Float32x8

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x2) MaskedTruncWithPrecision(imm uint8, y Mask64x2) Float64x2

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x4) MaskedTruncWithPrecision(imm uint8, y Mask64x4) Float64x4

// Asm: VRNDSCALEPD, CPU Feature: AVX512EVEX
func (x Float64x8) MaskedTruncWithPrecision(imm uint8, y Mask64x8) Float64x8

// Float64x8 converts from Float32x16 to Float64x8
func (from Float32x16) AsFloat64x8() (to Float64x8)

// Int16x32 converts from Float32x16 to Int16x32
func (from Float32x16) AsInt16x32() (to Int16x32)

// Int32x16 converts from Float32x16 to Int32x16
func (from Float32x16) AsInt32x16() (to Int32x16)

// Int64x8 converts from Float32x16 to Int64x8
func (from Float32x16) AsInt64x8() (to Int64x8)

// Int8x64 converts from Float32x16 to Int8x64
func (from Float32x16) AsInt8x64() (to Int8x64)

// Uint16x32 converts from Float32x16 to Uint16x32
func (from Float32x16) AsUint16x32() (to Uint16x32)

// Uint32x16 converts from Float32x16 to Uint32x16
func (from Float32x16) AsUint32x16() (to Uint32x16)

// Uint64x8 converts from Float32x16 to Uint64x8
func (from Float32x16) AsUint64x8() (to Uint64x8)

// Uint8x64 converts from Float32x16 to Uint8x64
func (from Float32x16) AsUint8x64() (to Uint8x64)

// Float64x2 converts from Float32x4 to Float64x2
func (from Float32x4) AsFloat64x2() (to Float64x2)

// Int16x8 converts from Float32x4 to Int16x8
func (from Float32x4) AsInt16x8() (to Int16x8)

// Int32x4 converts from Float32x4 to Int32x4
func (from Float32x4) AsInt32x4() (to Int32x4)

// Int64x2 converts from Float32x4 to Int64x2
func (from Float32x4) AsInt64x2() (to Int64x2)

// Int8x16 converts from Float32x4 to Int8x16
func (from Float32x4) AsInt8x16() (to Int8x16)

// Uint16x8 converts from Float32x4 to Uint16x8
func (from Float32x4) AsUint16x8() (to Uint16x8)

// Uint32x4 converts from Float32x4 to Uint32x4
func (from Float32x4) AsUint32x4() (to Uint32x4)

// Uint64x2 converts from Float32x4 to Uint64x2
func (from Float32x4) AsUint64x2() (to Uint64x2)

// Uint8x16 converts from Float32x4 to Uint8x16
func (from Float32x4) AsUint8x16() (to Uint8x16)

// Float64x4 converts from Float32x8 to Float64x4
func (from Float32x8) AsFloat64x4() (to Float64x4)

// Int16x16 converts from Float32x8 to Int16x16
func (from Float32x8) AsInt16x16() (to Int16x16)

// Int32x8 converts from Float32x8 to Int32x8
func (from Float32x8) AsInt32x8() (to Int32x8)

// Int64x4 converts from Float32x8 to Int64x4
func (from Float32x8) AsInt64x4() (to Int64x4)

// Int8x32 converts from Float32x8 to Int8x32
func (from Float32x8) AsInt8x32() (to Int8x32)

// Uint16x16 converts from Float32x8 to Uint16x16
func (from Float32x8) AsUint16x16() (to Uint16x16)

// Uint32x8 converts from Float32x8 to Uint32x8
func (from Float32x8) AsUint32x8() (to Uint32x8)

// Uint64x4 converts from Float32x8 to Uint64x4
func (from Float32x8) AsUint64x4() (to Uint64x4)

// Uint8x32 converts from Float32x8 to Uint8x32
func (from Float32x8) AsUint8x32() (to Uint8x32)

// Float32x4 converts from Float64x2 to Float32x4
func (from Float64x2) AsFloat32x4() (to Float32x4)

// Int16x8 converts from Float64x2 to Int16x8
func (from Float64x2) AsInt16x8() (to Int16x8)

// Int32x4 converts from Float64x2 to Int32x4
func (from Float64x2) AsInt32x4() (to Int32x4)

// Int64x2 converts from Float64x2 to Int64x2
func (from Float64x2) AsInt64x2() (to Int64x2)

// Int8x16 converts from Float64x2 to Int8x16
func (from Float64x2) AsInt8x16() (to Int8x16)

// Uint16x8 converts from Float64x2 to Uint16x8
func (from Float64x2) AsUint16x8() (to Uint16x8)

// Uint32x4 converts from Float64x2 to Uint32x4
func (from Float64x2) AsUint32x4() (to Uint32x4)

// Uint64x2 converts from Float64x2 to Uint64x2
func (from Float64x2) AsUint64x2() (to Uint64x2)

// Uint8x16 converts from Float64x2 to Uint8x16
func (from Float64x2) AsUint8x16() (to Uint8x16)

// Float32x8 converts from Float64x4 to Float32x8
func (from Float64x4) AsFloat32x8() (to Float32x8)

// Int16x16 converts from Float64x4 to Int16x16
func (from Float64x4) AsInt16x16() (to Int16x16)

// Int32x8 converts from Float64x4 to Int32x8
func (from Float64x4) AsInt32x8() (to Int32x8)

// Int64x4 converts from Float64x4 to Int64x4
func (from Float64x4) AsInt64x4() (to Int64x4)

// Int8x32 converts from Float64x4 to Int8x32
func (from Float64x4) AsInt8x32() (to Int8x32)

// Uint16x16 converts from Float64x4 to Uint16x16
func (from Float64x4) AsUint16x16() (to Uint16x16)

// Uint32x8 converts from Float64x4 to Uint32x8
func (from Float64x4) AsUint32x8() (to Uint32x8)

// Uint64x4 converts from Float64x4 to Uint64x4
func (from Float64x4) AsUint64x4() (to Uint64x4)

// Uint8x32 converts from Float64x4 to Uint8x32
func (from Float64x4) AsUint8x32() (to Uint8x32)

// Float32x16 converts from Float64x8 to Float32x16
func (from Float64x8) AsFloat32x16() (to Float32x16)

// Int16x32 converts from Float64x8 to Int16x32
func (from Float64x8) AsInt16x32() (to Int16x32)

// Int32x16 converts from Float64x8 to Int32x16
func (from Float64x8) AsInt32x16() (to Int32x16)

// Int64x8 converts from Float64x8 to Int64x8
func (from Float64x8) AsInt64x8() (to Int64x8)

// Int8x64 converts from Float64x8 to Int8x64
func (from Float64x8) AsInt8x64() (to Int8x64)

// Uint16x32 converts from Float64x8 to Uint16x32
func (from Float64x8) AsUint16x32() (to Uint16x32)

// Uint32x16 converts from Float64x8 to Uint32x16
func (from Float64x8) AsUint32x16() (to Uint32x16)

// Uint64x8 converts from Float64x8 to Uint64x8
func (from Float64x8) AsUint64x8() (to Uint64x8)

// Uint8x64 converts from Float64x8 to Uint8x64
func (from Float64x8) AsUint8x64() (to Uint8x64)

// Float32x8 converts from Int16x16 to Float32x8
func (from Int16x16) AsFloat32x8() (to Float32x8)

// Float64x4 converts from Int16x16 to Float64x4
func (from Int16x16) AsFloat64x4() (to Float64x4)

// Int32x8 converts from Int16x16 to Int32x8
func (from Int16x16) AsInt32x8() (to Int32x8)

// Int64x4 converts from Int16x16 to Int64x4
func (from Int16x16) AsInt64x4() (to Int64x4)

// Int8x32 converts from Int16x16 to Int8x32
func (from Int16x16) AsInt8x32() (to Int8x32)

// Uint16x16 converts from Int16x16 to Uint16x16
func (from Int16x16) AsUint16x16() (to Uint16x16)

// Uint32x8 converts from Int16x16 to Uint32x8
func (from Int16x16) AsUint32x8() (to Uint32x8)

// Uint64x4 converts from Int16x16 to Uint64x4
func (from Int16x16) AsUint64x4() (to Uint64x4)

// Uint8x32 converts from Int16x16 to Uint8x32
func (from Int16x16) AsUint8x32() (to Uint8x32)

// Float32x16 converts from Int16x32 to Float32x16
func (from Int16x32) AsFloat32x16() (to Float32x16)

// Float64x8 converts from Int16x32 to Float64x8
func (from Int16x32) AsFloat64x8() (to Float64x8)

// Int32x16 converts from Int16x32 to Int32x16
func (from Int16x32) AsInt32x16() (to Int32x16)

// Int64x8 converts from Int16x32 to Int64x8
func (from Int16x32) AsInt64x8() (to Int64x8)

// Int8x64 converts from Int16x32 to Int8x64
func (from Int16x32) AsInt8x64() (to Int8x64)

// Uint16x32 converts from Int16x32 to Uint16x32
func (from Int16x32) AsUint16x32() (to Uint16x32)

// Uint32x16 converts from Int16x32 to Uint32x16
func (from Int16x32) AsUint32x16() (to Uint32x16)

// Uint64x8 converts from Int16x32 to Uint64x8
func (from Int16x32) AsUint64x8() (to Uint64x8)

// Uint8x64 converts from Int16x32 to Uint8x64
func (from Int16x32) AsUint8x64() (to Uint8x64)

// Float32x4 converts from Int16x8 to Float32x4
func (from Int16x8) AsFloat32x4() (to Float32x4)

// Float64x2 converts from Int16x8 to Float64x2
func (from Int16x8) AsFloat64x2() (to Float64x2)

// Int32x4 converts from Int16x8 to Int32x4
func (from Int16x8) AsInt32x4() (to Int32x4)

// Int64x2 converts from Int16x8 to Int64x2
func (from Int16x8) AsInt64x2() (to Int64x2)

// Int8x16 converts from Int16x8 to Int8x16
func (from Int16x8) AsInt8x16() (to Int8x16)

// Uint16x8 converts from Int16x8 to Uint16x8
func (from Int16x8) AsUint16x8() (to Uint16x8)

// Uint32x4 converts from Int16x8 to Uint32x4
func (from Int16x8) AsUint32x4() (to Uint32x4)

// Uint64x2 converts from Int16x8 to Uint64x2
func (from Int16x8) AsUint64x2() (to Uint64x2)

// Uint8x16 converts from Int16x8 to Uint8x16
func (from Int16x8) AsUint8x16() (to Uint8x16)

// Float32x16 converts from Int32x16 to Float32x16
func (from Int32x16) AsFloat32x16() (to Float32x16)

// Float64x8 converts from Int32x16 to Float64x8
func (from Int32x16) AsFloat64x8() (to Float64x8)

// Int16x32 converts from Int32x16 to Int16x32
func (from Int32x16) AsInt16x32() (to Int16x32)

// Int64x8 converts from Int32x16 to Int64x8
func (from Int32x16) AsInt64x8() (to Int64x8)

// Int8x64 converts from Int32x16 to Int8x64
func (from Int32x16) AsInt8x64() (to Int8x64)

// Uint16x32 converts from Int32x16 to Uint16x32
func (from Int32x16) AsUint16x32() (to Uint16x32)

// Uint32x16 converts from Int32x16 to Uint32x16
func (from Int32x16) AsUint32x16() (to Uint32x16)

// Uint64x8 converts from Int32x16 to Uint64x8
func (from Int32x16) AsUint64x8() (to Uint64x8)

// Uint8x64 converts from Int32x16 to Uint8x64
func (from Int32x16) AsUint8x64() (to Uint8x64)

// Float32x4 converts from Int32x4 to Float32x4
func (from Int32x4) AsFloat32x4() (to Float32x4)

// Float64x2 converts from Int32x4 to Float64x2
func (from Int32x4) AsFloat64x2() (to Float64x2)

// Int16x8 converts from Int32x4 to Int16x8
func (from Int32x4) AsInt16x8() (to Int16x8)

// Int64x2 converts from Int32x4 to Int64x2
func (from Int32x4) AsInt64x2() (to Int64x2)

// Int8x16 converts from Int32x4 to Int8x16
func (from Int32x4) AsInt8x16() (to Int8x16)

// Uint16x8 converts from Int32x4 to Uint16x8
func (from Int32x4) AsUint16x8() (to Uint16x8)

// Uint32x4 converts from Int32x4 to Uint32x4
func (from Int32x4) AsUint32x4() (to Uint32x4)

// Uint64x2 converts from Int32x4 to Uint64x2
func (from Int32x4) AsUint64x2() (to Uint64x2)

// Uint8x16 converts from Int32x4 to Uint8x16
func (from Int32x4) AsUint8x16() (to Uint8x16)

// Float32x8 converts from Int32x8 to Float32x8
func (from Int32x8) AsFloat32x8() (to Float32x8)

// Float64x4 converts from Int32x8 to Float64x4
func (from Int32x8) AsFloat64x4() (to Float64x4)

// Int16x16 converts from Int32x8 to Int16x16
func (from Int32x8) AsInt16x16() (to Int16x16)

// Int64x4 converts from Int32x8 to Int64x4
func (from Int32x8) AsInt64x4() (to Int64x4)

// Int8x32 converts from Int32x8 to Int8x32
func (from Int32x8) AsInt8x32() (to Int8x32)

// Uint16x16 converts from Int32x8 to Uint16x16
func (from Int32x8) AsUint16x16() (to Uint16x16)

// Uint32x8 converts from Int32x8 to Uint32x8
func (from Int32x8) AsUint32x8() (to Uint32x8)

// Uint64x4 converts from Int32x8 to Uint64x4
func (from Int32x8) AsUint64x4() (to Uint64x4)

// Uint8x32 converts from Int32x8 to Uint8x32
func (from Int32x8) AsUint8x32() (to Uint8x32)

// Float32x4 converts from Int64x2 to Float32x4
func (from Int64x2) AsFloat32x4() (to Float32x4)

// Float64x2 converts from Int64x2 to Float64x2
func (from Int64x2) AsFloat64x2() (to Float64x2)

// Int16x8 converts from Int64x2 to Int16x8
func (from Int64x2) AsInt16x8() (to Int16x8)

// Int32x4 converts from Int64x2 to Int32x4
func (from Int64x2) AsInt32x4() (to Int32x4)

// Int8x16 converts from Int64x2 to Int8x16
func (from Int64x2) AsInt8x16() (to Int8x16)

// Uint16x8 converts from Int64x2 to Uint16x8
func (from Int64x2) AsUint16x8() (to Uint16x8)

// Uint32x4 converts from Int64x2 to Uint32x4
func (from Int64x2) AsUint32x4() (to Uint32x4)

// Uint64x2 converts from Int64x2 to Uint64x2
func (from Int64x2) AsUint64x2() (to Uint64x2)

// Uint8x16 converts from Int64x2 to Uint8x16
func (from Int64x2) AsUint8x16() (to Uint8x16)

// Float32x8 converts from Int64x4 to Float32x8
func (from Int64x4) AsFloat32x8() (to Float32x8)

// Float64x4 converts from Int64x4 to Float64x4
func (from Int64x4) AsFloat64x4() (to Float64x4)

// Int16x16 converts from Int64x4 to Int16x16
func (from Int64x4) AsInt16x16() (to Int16x16)

// Int32x8 converts from Int64x4 to Int32x8
func (from Int64x4) AsInt32x8() (to Int32x8)

// Int8x32 converts from Int64x4 to Int8x32
func (from Int64x4) AsInt8x32() (to Int8x32)

// Uint16x16 converts from Int64x4 to Uint16x16
func (from Int64x4) AsUint16x16() (to Uint16x16)

// Uint32x8 converts from Int64x4 to Uint32x8
func (from Int64x4) AsUint32x8() (to Uint32x8)

// Uint64x4 converts from Int64x4 to Uint64x4
func (from Int64x4) AsUint64x4() (to Uint64x4)

// Uint8x32 converts from Int64x4 to Uint8x32
func (from Int64x4) AsUint8x32() (to Uint8x32)

// Float32x16 converts from Int64x8 to Float32x16
func (from Int64x8) AsFloat32x16() (to Float32x16)

// Float64x8 converts from Int64x8 to Float64x8
func (from Int64x8) AsFloat64x8() (to Float64x8)

// Int16x32 converts from Int64x8 to Int16x32
func (from Int64x8) AsInt16x32() (to Int16x32)

// Int32x16 converts from Int64x8 to Int32x16
func (from Int64x8) AsInt32x16() (to Int32x16)

// Int8x64 converts from Int64x8 to Int8x64
func (from Int64x8) AsInt8x64() (to Int8x64)

// Uint16x32 converts from Int64x8 to Uint16x32
func (from Int64x8) AsUint16x32() (to Uint16x32)

// Uint32x16 converts from Int64x8 to Uint32x16
func (from Int64x8) AsUint32x16() (to Uint32x16)

// Uint64x8 converts from Int64x8 to Uint64x8
func (from Int64x8) AsUint64x8() (to Uint64x8)

// Uint8x64 converts from Int64x8 to Uint8x64
func (from Int64x8) AsUint8x64() (to Uint8x64)

// Float32x4 converts from Int8x16 to Float32x4
func (from Int8x16) AsFloat32x4() (to Float32x4)

// Float64x2 converts from Int8x16 to Float64x2
func (from Int8x16) AsFloat64x2() (to Float64x2)

// Int16x8 converts from Int8x16 to Int16x8
func (from Int8x16) AsInt16x8() (to Int16x8)

// Int32x4 converts from Int8x16 to Int32x4
func (from Int8x16) AsInt32x4() (to Int32x4)

// Int64x2 converts from Int8x16 to Int64x2
func (from Int8x16) AsInt64x2() (to Int64x2)

// Uint16x8 converts from Int8x16 to Uint16x8
func (from Int8x16) AsUint16x8() (to Uint16x8)

// Uint32x4 converts from Int8x16 to Uint32x4
func (from Int8x16) AsUint32x4() (to Uint32x4)

// Uint64x2 converts from Int8x16 to Uint64x2
func (from Int8x16) AsUint64x2() (to Uint64x2)

// Uint8x16 converts from Int8x16 to Uint8x16
func (from Int8x16) AsUint8x16() (to Uint8x16)

// Float32x8 converts from Int8x32 to Float32x8
func (from Int8x32) AsFloat32x8() (to Float32x8)

// Float64x4 converts from Int8x32 to Float64x4
func (from Int8x32) AsFloat64x4() (to Float64x4)

// Int16x16 converts from Int8x32 to Int16x16
func (from Int8x32) AsInt16x16() (to Int16x16)

// Int32x8 converts from Int8x32 to Int32x8
func (from Int8x32) AsInt32x8() (to Int32x8)

// Int64x4 converts from Int8x32 to Int64x4
func (from Int8x32) AsInt64x4() (to Int64x4)

// Uint16x16 converts from Int8x32 to Uint16x16
func (from Int8x32) AsUint16x16() (to Uint16x16)

// Uint32x8 converts from Int8x32 to Uint32x8
func (from Int8x32) AsUint32x8() (to Uint32x8)

// Uint64x4 converts from Int8x32 to Uint64x4
func (from Int8x32) AsUint64x4() (to Uint64x4)

// Uint8x32 converts from Int8x32 to Uint8x32
func (from Int8x32) AsUint8x32() (to Uint8x32)

// Float32x16 converts from Int8x64 to Float32x16
func (from Int8x64) AsFloat32x16() (to Float32x16)

// Float64x8 converts from Int8x64 to Float64x8
func (from Int8x64) AsFloat64x8() (to Float64x8)

// Int16x32 converts from Int8x64 to Int16x32
func (from Int8x64) AsInt16x32() (to Int16x32)

// Int32x16 converts from Int8x64 to Int32x16
func (from Int8x64) AsInt32x16() (to Int32x16)

// Int64x8 converts from Int8x64 to Int64x8
func (from Int8x64) AsInt64x8() (to Int64x8)

// Uint16x32 converts from Int8x64 to Uint16x32
func (from Int8x64) AsUint16x32() (to Uint16x32)

// Uint32x16 converts from Int8x64 to Uint32x16
func (from Int8x64) AsUint32x16() (to Uint32x16)

// Uint64x8 converts from Int8x64 to Uint64x8
func (from Int8x64) AsUint64x8() (to Uint64x8)

// Uint8x64 converts from Int8x64 to Uint8x64
func (from Int8x64) AsUint8x64() (to Uint8x64)

// Float32x8 converts from Uint16x16 to Float32x8
func (from Uint16x16) AsFloat32x8() (to Float32x8)

// Float64x4 converts from Uint16x16 to Float64x4
func (from Uint16x16) AsFloat64x4() (to Float64x4)

// Int16x16 converts from Uint16x16 to Int16x16
func (from Uint16x16) AsInt16x16() (to Int16x16)

// Int32x8 converts from Uint16x16 to Int32x8
func (from Uint16x16) AsInt32x8() (to Int32x8)

// Int64x4 converts from Uint16x16 to Int64x4
func (from Uint16x16) AsInt64x4() (to Int64x4)

// Int8x32 converts from Uint16x16 to Int8x32
func (from Uint16x16) AsInt8x32() (to Int8x32)

// Uint32x8 converts from Uint16x16 to Uint32x8
func (from Uint16x16) AsUint32x8() (to Uint32x8)

// Uint64x4 converts from Uint16x16 to Uint64x4
func (from Uint16x16) AsUint64x4() (to Uint64x4)

// Uint8x32 converts from Uint16x16 to Uint8x32
func (from Uint16x16) AsUint8x32() (to Uint8x32)

// Float32x16 converts from Uint16x32 to Float32x16
func (from Uint16x32) AsFloat32x16() (to Float32x16)

// Float64x8 converts from Uint16x32 to Float64x8
func (from Uint16x32) AsFloat64x8() (to Float64x8)

// Int16x32 converts from Uint16x32 to Int16x32
func (from Uint16x32) AsInt16x32() (to Int16x32)

// Int32x16 converts from Uint16x32 to Int32x16
func (from Uint16x32) AsInt32x16() (to Int32x16)

// Int64x8 converts from Uint16x32 to Int64x8
func (from Uint16x32) AsInt64x8() (to Int64x8)

// Int8x64 converts from Uint16x32 to Int8x64
func (from Uint16x32) AsInt8x64() (to Int8x64)

// Uint32x16 converts from Uint16x32 to Uint32x16
func (from Uint16x32) AsUint32x16() (to Uint32x16)

// Uint64x8 converts from Uint16x32 to Uint64x8
func (from Uint16x32) AsUint64x8() (to Uint64x8)

// Uint8x64 converts from Uint16x32 to Uint8x64
func (from Uint16x32) AsUint8x64() (to Uint8x64)

// Float32x4 converts from Uint16x8 to Float32x4
func (from Uint16x8) AsFloat32x4() (to Float32x4)

// Float64x2 converts from Uint16x8 to Float64x2
func (from Uint16x8) AsFloat64x2() (to Float64x2)

// Int16x8 converts from Uint16x8 to Int16x8
func (from Uint16x8) AsInt16x8() (to Int16x8)

// Int32x4 converts from Uint16x8 to Int32x4
func (from Uint16x8) AsInt32x4() (to Int32x4)

// Int64x2 converts from Uint16x8 to Int64x2
func (from Uint16x8) AsInt64x2() (to Int64x2)

// Int8x16 converts from Uint16x8 to Int8x16
func (from Uint16x8) AsInt8x16() (to Int8x16)

// Uint32x4 converts from Uint16x8 to Uint32x4
func (from Uint16x8) AsUint32x4() (to Uint32x4)

// Uint64x2 converts from Uint16x8 to Uint64x2
func (from Uint16x8) AsUint64x2() (to Uint64x2)

// Uint8x16 converts from Uint16x8 to Uint8x16
func (from Uint16x8) AsUint8x16() (to Uint8x16)

// Float32x16 converts from Uint32x16 to Float32x16
func (from Uint32x16) AsFloat32x16() (to Float32x16)

// Float64x8 converts from Uint32x16 to Float64x8
func (from Uint32x16) AsFloat64x8() (to Float64x8)

// Int16x32 converts from Uint32x16 to Int16x32
func (from Uint32x16) AsInt16x32() (to Int16x32)

// Int32x16 converts from Uint32x16 to Int32x16
func (from Uint32x16) AsInt32x16() (to Int32x16)

// Int64x8 converts from Uint32x16 to Int64x8
func (from Uint32x16) AsInt64x8() (to Int64x8)

// Int8x64 converts from Uint32x16 to Int8x64
func (from Uint32x16) AsInt8x64() (to Int8x64)

// Uint16x32 converts from Uint32x16 to Uint16x32
func (from Uint32x16) AsUint16x32() (to Uint16x32)

// Uint64x8 converts from Uint32x16 to Uint64x8
func (from Uint32x16) AsUint64x8() (to Uint64x8)

// Uint8x64 converts from Uint32x16 to Uint8x64
func (from Uint32x16) AsUint8x64() (to Uint8x64)

// Float32x4 converts from Uint32x4 to Float32x4
func (from Uint32x4) AsFloat32x4() (to Float32x4)

// Float64x2 converts from Uint32x4 to Float64x2
func (from Uint32x4) AsFloat64x2() (to Float64x2)

// Int16x8 converts from Uint32x4 to Int16x8
func (from Uint32x4) AsInt16x8() (to Int16x8)

// Int32x4 converts from Uint32x4 to Int32x4
func (from Uint32x4) AsInt32x4() (to Int32x4)

// Int64x2 converts from Uint32x4 to Int64x2
func (from Uint32x4) AsInt64x2() (to Int64x2)

// Int8x16 converts from Uint32x4 to Int8x16
func (from Uint32x4) AsInt8x16() (to Int8x16)

// Uint16x8 converts from Uint32x4 to Uint16x8
func (from Uint32x4) AsUint16x8() (to Uint16x8)

// Uint64x2 converts from Uint32x4 to Uint64x2
func (from Uint32x4) AsUint64x2() (to Uint64x2)

// Uint8x16 converts from Uint32x4 to Uint8x16
func (from Uint32x4) AsUint8x16() (to Uint8x16)

// Float32x8 converts from Uint32x8 to Float32x8
func (from Uint32x8) AsFloat32x8() (to Float32x8)

// Float64x4 converts from Uint32x8 to Float64x4
func (from Uint32x8) AsFloat64x4() (to Float64x4)

// Int16x16 converts from Uint32x8 to Int16x16
func (from Uint32x8) AsInt16x16() (to Int16x16)

// Int32x8 converts from Uint32x8 to Int32x8
func (from Uint32x8) AsInt32x8() (to Int32x8)

// Int64x4 converts from Uint32x8 to Int64x4
func (from Uint32x8) AsInt64x4() (to Int64x4)

// Int8x32 converts from Uint32x8 to Int8x32
func (from Uint32x8) AsInt8x32() (to Int8x32)

// Uint16x16 converts from Uint32x8 to Uint16x16
func (from Uint32x8) AsUint16x16() (to Uint16x16)

// Uint64x4 converts from Uint32x8 to Uint64x4
func (from Uint32x8) AsUint64x4() (to Uint64x4)

// Uint8x32 converts from Uint32x8 to Uint8x32
func (from Uint32x8) AsUint8x32() (to Uint8x32)

// Float32x4 converts from Uint64x2 to Float32x4
func (from Uint64x2) AsFloat32x4() (to Float32x4)

// Float64x2 converts from Uint64x2 to Float64x2
func (from Uint64x2) AsFloat64x2() (to Float64x2)

// Int16x8 converts from Uint64x2 to Int16x8
func (from Uint64x2) AsInt16x8() (to Int16x8)

// Int32x4 converts from Uint64x2 to Int32x4
func (from Uint64x2) AsInt32x4() (to Int32x4)

// Int64x2 converts from Uint64x2 to Int64x2
func (from Uint64x2) AsInt64x2() (to Int64x2)

// Int8x16 converts from Uint64x2 to Int8x16
func (from Uint64x2) AsInt8x16() (to Int8x16)

// Uint16x8 converts from Uint64x2 to Uint16x8
func (from Uint64x2) AsUint16x8() (to Uint16x8)

// Uint32x4 converts from Uint64x2 to Uint32x4
func (from Uint64x2) AsUint32x4() (to Uint32x4)

// Uint8x16 converts from Uint64x2 to Uint8x16
func (from Uint64x2) AsUint8x16() (to Uint8x16)

// Float32x8 converts from Uint64x4 to Float32x8
func (from Uint64x4) AsFloat32x8() (to Float32x8)

// Float64x4 converts from Uint64x4 to Float64x4
func (from Uint64x4) AsFloat64x4() (to Float64x4)

// Int16x16 converts from Uint64x4 to Int16x16
func (from Uint64x4) AsInt16x16() (to Int16x16)

// Int32x8 converts from Uint64x4 to Int32x8
func (from Uint64x4) AsInt32x8() (to Int32x8)

// Int64x4 converts from Uint64x4 to Int64x4
func (from Uint64x4) AsInt64x4() (to Int64x4)

// Int8x32 converts from Uint64x4 to Int8x32
func (from Uint64x4) AsInt8x32() (to Int8x32)

// Uint16x16 converts from Uint64x4 to Uint16x16
func (from Uint64x4) AsUint16x16() (to Uint16x16)

// Uint32x8 converts from Uint64x4 to Uint32x8
func (from Uint64x4) AsUint32x8() (to Uint32x8)

// Uint8x32 converts from Uint64x4 to Uint8x32
func (from Uint64x4) AsUint8x32() (to Uint8x32)

// Float32x16 converts from Uint64x8 to Float32x16
func (from Uint64x8) AsFloat32x16() (to Float32x16)

// Float64x8 converts from Uint64x8 to Float64x8
func (from Uint64x8) AsFloat64x8() (to Float64x8)

// Int16x32 converts from Uint64x8 to Int16x32
func (from Uint64x8) AsInt16x32() (to Int16x32)

// Int32x16 converts from Uint64x8 to Int32x16
func (from Uint64x8) AsInt32x16() (to Int32x16)

// Int64x8 converts from Uint64x8 to Int64x8
func (from Uint64x8) AsInt64x8() (to Int64x8)

// Int8x64 converts from Uint64x8 to Int8x64
func (from Uint64x8) AsInt8x64() (to Int8x64)

// Uint16x32 converts from Uint64x8 to Uint16x32
func (from Uint64x8) AsUint16x32() (to Uint16x32)

// Uint32x16 converts from Uint64x8 to Uint32x16
func (from Uint64x8) AsUint32x16() (to Uint32x16)

// Uint8x64 converts from Uint64x8 to Uint8x64
func (from Uint64x8) AsUint8x64() (to Uint8x64)

// Float32x4 converts from Uint8x16 to Float32x4
func (from Uint8x16) AsFloat32x4() (to Float32x4)

// Float64x2 converts from Uint8x16 to Float64x2
func (from Uint8x16) AsFloat64x2() (to Float64x2)

// Int16x8 converts from Uint8x16 to Int16x8
func (from Uint8x16) AsInt16x8() (to Int16x8)

// Int32x4 converts from Uint8x16 to Int32x4
func (from Uint8x16) AsInt32x4() (to Int32x4)

// Int64x2 converts from Uint8x16 to Int64x2
func (from Uint8x16) AsInt64x2() (to Int64x2)

// Int8x16 converts from Uint8x16 to Int8x16
func (from Uint8x16) AsInt8x16() (to Int8x16)

// Uint16x8 converts from Uint8x16 to Uint16x8
func (from Uint8x16) AsUint16x8() (to Uint16x8)

// Uint32x4 converts from Uint8x16 to Uint32x4
func (from Uint8x16) AsUint32x4() (to Uint32x4)

// Uint64x2 converts from Uint8x16 to Uint64x2
func (from Uint8x16) AsUint64x2() (to Uint64x2)

// Float32x8 converts from Uint8x32 to Float32x8
func (from Uint8x32) AsFloat32x8() (to Float32x8)

// Float64x4 converts from Uint8x32 to Float64x4
func (from Uint8x32) AsFloat64x4() (to Float64x4)

// Int16x16 converts from Uint8x32 to Int16x16
func (from Uint8x32) AsInt16x16() (to Int16x16)

// Int32x8 converts from Uint8x32 to Int32x8
func (from Uint8x32) AsInt32x8() (to Int32x8)

// Int64x4 converts from Uint8x32 to Int64x4
func (from Uint8x32) AsInt64x4() (to Int64x4)

// Int8x32 converts from Uint8x32 to Int8x32
func (from Uint8x32) AsInt8x32() (to Int8x32)

// Uint16x16 converts from Uint8x32 to Uint16x16
func (from Uint8x32) AsUint16x16() (to Uint16x16)

// Uint32x8 converts from Uint8x32 to Uint32x8
func (from Uint8x32) AsUint32x8() (to Uint32x8)

// Uint64x4 converts from Uint8x32 to Uint64x4
func (from Uint8x32) AsUint64x4() (to Uint64x4)

// Float32x16 converts from Uint8x64 to Float32x16
func (from Uint8x64) AsFloat32x16() (to Float32x16)

// Float64x8 converts from Uint8x64 to Float64x8
func (from Uint8x64) AsFloat64x8() (to Float64x8)

// Int16x32 converts from Uint8x64 to Int16x32
func (from Uint8x64) AsInt16x32() (to Int16x32)

// Int32x16 converts from Uint8x64 to Int32x16
func (from Uint8x64) AsInt32x16() (to Int32x16)

// Int64x8 converts from Uint8x64 to Int64x8
func (from Uint8x64) AsInt64x8() (to Int64x8)

// Int8x64 converts from Uint8x64 to Int8x64
func (from Uint8x64) AsInt8x64() (to Int8x64)

// Uint16x32 converts from Uint8x64 to Uint16x32
func (from Uint8x64) AsUint16x32() (to Uint16x32)

// Uint32x16 converts from Uint8x64 to Uint32x16
func (from Uint8x64) AsUint32x16() (to Uint32x16)

// Uint64x8 converts from Uint8x64 to Uint64x8
func (from Uint8x64) AsUint64x8() (to Uint64x8)

// converts from Mask16x16 to Int16x16
func (from Mask16x16) AsInt16x16() (to Int16x16)

// converts from Int16x16 to Mask16x16
func (from Int16x16) AsMask16x16() (to Mask16x16)

func (x Mask16x16) And(y Mask16x16) Mask16x16

func (x Mask16x16) Or(y Mask16x16) Mask16x16

// converts from Mask16x32 to Int16x32
func (from Mask16x32) AsInt16x32() (to Int16x32)

// converts from Int16x32 to Mask16x32
func (from Int16x32) AsMask16x32() (to Mask16x32)

func (x Mask16x32) And(y Mask16x32) Mask16x32

func (x Mask16x32) Or(y Mask16x32) Mask16x32

// converts from Mask16x8 to Int16x8
func (from Mask16x8) AsInt16x8() (to Int16x8)

// converts from Int16x8 to Mask16x8
func (from Int16x8) AsMask16x8() (to Mask16x8)

func (x Mask16x8) And(y Mask16x8) Mask16x8

func (x Mask16x8) Or(y Mask16x8) Mask16x8

// converts from Mask32x16 to Int32x16
func (from Mask32x16) AsInt32x16() (to Int32x16)

// converts from Int32x16 to Mask32x16
func (from Int32x16) AsMask32x16() (to Mask32x16)

func (x Mask32x16) And(y Mask32x16) Mask32x16

func (x Mask32x16) Or(y Mask32x16) Mask32x16

// converts from Mask32x4 to Int32x4
func (from Mask32x4) AsInt32x4() (to Int32x4)

// converts from Int32x4 to Mask32x4
func (from Int32x4) AsMask32x4() (to Mask32x4)

func (x Mask32x4) And(y Mask32x4) Mask32x4

func (x Mask32x4) Or(y Mask32x4) Mask32x4

// converts from Mask32x8 to Int32x8
func (from Mask32x8) AsInt32x8() (to Int32x8)

// converts from Int32x8 to Mask32x8
func (from Int32x8) AsMask32x8() (to Mask32x8)

func (x Mask32x8) And(y Mask32x8) Mask32x8

func (x Mask32x8) Or(y Mask32x8) Mask32x8

// converts from Mask64x2 to Int64x2
func (from Mask64x2) AsInt64x2() (to Int64x2)

// converts from Int64x2 to Mask64x2
func (from Int64x2) AsMask64x2() (to Mask64x2)

func (x Mask64x2) And(y Mask64x2) Mask64x2

func (x Mask64x2) Or(y Mask64x2) Mask64x2

// converts from Mask64x4 to Int64x4
func (from Mask64x4) AsInt64x4() (to Int64x4)

// converts from Int64x4 to Mask64x4
func (from Int64x4) AsMask64x4() (to Mask64x4)

func (x Mask64x4) And(y Mask64x4) Mask64x4

func (x Mask64x4) Or(y Mask64x4) Mask64x4

// converts from Mask64x8 to Int64x8
func (from Mask64x8) AsInt64x8() (to Int64x8)

// converts from Int64x8 to Mask64x8
func (from Int64x8) AsMask64x8() (to Mask64x8)

func (x Mask64x8) And(y Mask64x8) Mask64x8

func (x Mask64x8) Or(y Mask64x8) Mask64x8

// converts from Mask8x16 to Int8x16
func (from Mask8x16) AsInt8x16() (to Int8x16)

// converts from Int8x16 to Mask8x16
func (from Int8x16) AsMask8x16() (to Mask8x16)

func (x Mask8x16) And(y Mask8x16) Mask8x16

func (x Mask8x16) Or(y Mask8x16) Mask8x16

// converts from Mask8x32 to Int8x32
func (from Mask8x32) AsInt8x32() (to Int8x32)

// converts from Int8x32 to Mask8x32
func (from Int8x32) AsMask8x32() (to Mask8x32)

func (x Mask8x32) And(y Mask8x32) Mask8x32

func (x Mask8x32) Or(y Mask8x32) Mask8x32

// converts from Mask8x64 to Int8x64
func (from Mask8x64) AsInt8x64() (to Int8x64)

// converts from Int8x64 to Mask8x64
func (from Int8x64) AsMask8x64() (to Mask8x64)

func (x Mask8x64) And(y Mask8x64) Mask8x64

func (x Mask8x64) Or(y Mask8x64) Mask8x64
